/* tslint:disable */
/* eslint-disable */
/**
 * Auth Service
 * 提供身份管理服务以及OAuth2授权服务。身份管理服务包含用户管理、角色管理、权限管理等，OAuth2授权服务包含应用管理、应用授权模式与授权作用域管理等。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@dustlight.cn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Authority
 */
export interface Authority {
    /**
     * 
     * @type {number}
     * @memberof Authority
     */
    aid?: number;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    authorityName?: string;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    authorityDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface AuthorizationClient
 */
export interface AuthorizationClient {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationClient
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationClient
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationClient
     */
    logo?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof AuthorizationClient
     */
    additionalInformation?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof AuthorizationClient
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationClient
     */
    updatedAt?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorizationClient
     */
    status?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthorizationClient
     */
    uid?: number;
    /**
     * 
     * @type {Array<Resource>}
     * @memberof AuthorizationClient
     */
    resources?: Array<Resource>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorizationClient
     */
    members?: Array<string>;
    /**
     * 
     * @type {Array<AuthorizationClientScope>}
     * @memberof AuthorizationClient
     */
    scopes?: Array<AuthorizationClientScope>;
    /**
     * 
     * @type {Array<GrantType>}
     * @memberof AuthorizationClient
     */
    types?: Array<GrantType>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorizationClient
     */
    authorities?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationClient
     */
    clientSecret?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof AuthorizationClient
     */
    registeredRedirectUri?: Set<string>;
    /**
     * 
     * @type {number}
     * @memberof AuthorizationClient
     */
    accessTokenValiditySeconds?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthorizationClient
     */
    refreshTokenValiditySeconds?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationClient
     */
    cid?: string;
}
/**
 * 
 * @export
 * @interface AuthorizationClientScope
 */
export interface AuthorizationClientScope {
    /**
     * 
     * @type {number}
     * @memberof AuthorizationClientScope
     */
    sid?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationClientScope
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationClientScope
     */
    subtitle?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationClientScope
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthorizationClientScope
     */
    approved?: boolean;
}
/**
 * 
 * @export
 * @interface AuthorizationResponse
 */
export interface AuthorizationResponse {
    /**
     * 
     * @type {AuthorizationClient}
     * @memberof AuthorizationResponse
     */
    client?: AuthorizationClient;
    /**
     * 
     * @type {PublicUser}
     * @memberof AuthorizationResponse
     */
    owner?: PublicUser;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponse
     */
    redirect?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorizationResponse
     */
    count?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AuthorizationResponse
     */
    approved?: boolean;
}
/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    name?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    members?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Client
     */
    authorities?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    status?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    uid?: number;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    logo?: string;
    /**
     * 
     * @type {Array<ClientScope>}
     * @memberof Client
     */
    scopes?: Array<ClientScope>;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    cid?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof Client
     */
    resources?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    secret?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Client
     */
    extra?: { [key: string]: object; };
    /**
     * 
     * @type {Set<string>}
     * @memberof Client
     */
    grantTypes?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Client
     */
    redirectUri?: Set<string>;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    accessTokenValidity?: number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    refreshTokenValidity?: number;
}
/**
 * 
 * @export
 * @interface ClientScope
 */
export interface ClientScope {
    /**
     * 
     * @type {boolean}
     * @memberof ClientScope
     */
    autoApprove?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ClientScope
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientScope
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientScope
     */
    sid?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientScope
     */
    subtitle?: string;
}
/**
 * 
 * @export
 * @interface GrantType
 */
export interface GrantType {
    /**
     * 
     * @type {number}
     * @memberof GrantType
     */
    tid?: number;
    /**
     * 
     * @type {string}
     * @memberof GrantType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof GrantType
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof GrantType
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof GrantType
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface OAuth2AccessToken
 */
export interface OAuth2AccessToken {
    /**
     * 
     * @type {string}
     * @memberof OAuth2AccessToken
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2AccessToken
     */
    expiration?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof OAuth2AccessToken
     */
    scope?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof OAuth2AccessToken
     */
    tokenType?: string;
    /**
     * 
     * @type {OAuth2RefreshToken}
     * @memberof OAuth2AccessToken
     */
    refreshToken?: OAuth2RefreshToken;
    /**
     * 
     * @type {boolean}
     * @memberof OAuth2AccessToken
     */
    expired?: boolean;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OAuth2AccessToken
     */
    additionalInformation?: { [key: string]: object; };
    /**
     * 
     * @type {number}
     * @memberof OAuth2AccessToken
     */
    expiresIn?: number;
}
/**
 * 
 * @export
 * @interface OAuth2RefreshToken
 */
export interface OAuth2RefreshToken {
    /**
     * 
     * @type {string}
     * @memberof OAuth2RefreshToken
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface PublicUser
 */
export interface PublicUser {
    /**
     * 
     * @type {number}
     * @memberof PublicUser
     */
    uid?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicUser
     */
    gender?: number;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    unlockedAt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicUser
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    username?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicUser
     */
    accountNonLocked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicUser
     */
    credentialsNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicUser
     */
    accountNonExpired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    createdAt?: string;
}
/**
 * 
 * @export
 * @interface QueryResultsClient
 */
export interface QueryResultsClient {
    /**
     * 
     * @type {number}
     * @memberof QueryResultsClient
     */
    count?: number;
    /**
     * 
     * @type {Array<Client>}
     * @memberof QueryResultsClient
     */
    data?: Array<Client>;
}
/**
 * 
 * @export
 * @interface QueryResultsUser
 */
export interface QueryResultsUser {
    /**
     * 
     * @type {number}
     * @memberof QueryResultsUser
     */
    count?: number;
    /**
     * 
     * @type {Array<User>}
     * @memberof QueryResultsUser
     */
    data?: Array<User>;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    rid?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    rid?: number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    roleName?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    roleDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface Scope
 */
export interface Scope {
    /**
     * 
     * @type {number}
     * @memberof Scope
     */
    sid?: number;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    subtitle?: string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Scope
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    authorities?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    uid?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    gender?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    nickname?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    unlockedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    accountExpiredAt?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    credentialsExpiredAt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    accountNonLocked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    credentialsNonExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    accountNonExpired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    updatedAt?: string;
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof User
     */
    roles?: Array<UserRole>;
}
/**
 * 
 * @export
 * @interface UserRole
 */
export interface UserRole {
    /**
     * 
     * @type {number}
     * @memberof UserRole
     */
    rid?: number;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    roleName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    roleDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    expiredAt?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserRole
     */
    expired?: boolean;
}
/**
 * 
 * @export
 * @interface UserRoleClient
 */
export interface UserRoleClient {
    /**
     * 
     * @type {string}
     * @memberof UserRoleClient
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleClient
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleClient
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleClient
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleClient
     */
    updatedAt?: string;
    /**
     * 
     * @type {number}
     * @memberof UserRoleClient
     */
    status?: number;
    /**
     * 
     * @type {number}
     * @memberof UserRoleClient
     */
    uid?: number;
    /**
     * 
     * @type {Set<string>}
     * @memberof UserRoleClient
     */
    resources?: Set<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserRoleClient
     */
    members?: Array<string>;
    /**
     * 
     * @type {Array<ClientScope>}
     * @memberof UserRoleClient
     */
    scopes?: Array<ClientScope>;
    /**
     * 
     * @type {Array<GrantType>}
     * @memberof UserRoleClient
     */
    types?: Array<GrantType>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserRoleClient
     */
    authorities?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof UserRoleClient
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof UserRoleClient
     */
    clientSecret?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof UserRoleClient
     */
    extra?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof UserRoleClient
     */
    cid?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof UserRoleClient
     */
    grantTypes?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof UserRoleClient
     */
    redirectUri?: Set<string>;
    /**
     * 
     * @type {number}
     * @memberof UserRoleClient
     */
    accessTokenValidity?: number;
    /**
     * 
     * @type {number}
     * @memberof UserRoleClient
     */
    refreshTokenValidity?: number;
}

/**
 * AuthoritiesApi - axios parameter creator
 * @export
 */
export const AuthoritiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 删除权限
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorities: async (requestBody: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('deleteAuthorities', 'requestBody', requestBody)
            const localVarPath = `/v1/authorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 删除应用权限
         * @param {string} cid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientAuthorities: async (cid: string, authorityId: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('deleteClientAuthorities', 'cid', cid)
            // verify required parameter 'authorityId' is not null or undefined
            assertParamExists('deleteClientAuthorities', 'authorityId', authorityId)
            const localVarPath = `/v1/clients/{cid}/authorities`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 删除角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleAuthorities: async (rid: number, authorityId: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            assertParamExists('deleteRoleAuthorities', 'rid', rid)
            // verify required parameter 'authorityId' is not null or undefined
            assertParamExists('deleteRoleAuthorities', 'authorityId', authorityId)
            const localVarPath = `/v1/roles/{rid}/authorities`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取权限
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorities: async (id?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/authorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientAuthorities: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getClientAuthorities', 'cid', cid)
            const localVarPath = `/v1/clients/{cid}/authorities`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取角色权限
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAuthorities: async (rid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            assertParamExists('getRoleAuthorities', 'rid', rid)
            const localVarPath = `/v1/roles/{rid}/authorities`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientAuthorities: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserClientAuthorities', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getUserClientAuthorities', 'cid', cid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/authorities`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 修改或添加权限
         * @param {Array<Authority>} authority 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAuthorities: async (authority: Array<Authority>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authority' is not null or undefined
            assertParamExists('setAuthorities', 'authority', authority)
            const localVarPath = `/v1/authorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authority, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 添加应用权限
         * @param {string} cid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setClientAuthorities: async (cid: string, authorityId: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('setClientAuthorities', 'cid', cid)
            // verify required parameter 'authorityId' is not null or undefined
            assertParamExists('setClientAuthorities', 'authorityId', authorityId)
            const localVarPath = `/v1/clients/{cid}/authorities`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 添加角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoleAuthorities: async (rid: number, authorityId: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rid' is not null or undefined
            assertParamExists('setRoleAuthorities', 'rid', rid)
            // verify required parameter 'authorityId' is not null or undefined
            assertParamExists('setRoleAuthorities', 'authorityId', authorityId)
            const localVarPath = `/v1/roles/{rid}/authorities`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthoritiesApi - functional programming interface
 * @export
 */
export const AuthoritiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthoritiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 删除权限
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthorities(requestBody: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthorities(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 删除应用权限
         * @param {string} cid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClientAuthorities(cid: string, authorityId: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClientAuthorities(cid, authorityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 删除角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoleAuthorities(rid: number, authorityId: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoleAuthorities(rid, authorityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取权限
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorities(id?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Authority>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorities(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientAuthorities(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientAuthorities(cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取角色权限
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleAuthorities(rid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleAuthorities(rid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserClientAuthorities(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserClientAuthorities(uid, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 修改或添加权限
         * @param {Array<Authority>} authority 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAuthorities(authority: Array<Authority>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAuthorities(authority, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 添加应用权限
         * @param {string} cid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setClientAuthorities(cid: string, authorityId: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setClientAuthorities(cid, authorityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 添加角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRoleAuthorities(rid: number, authorityId: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRoleAuthorities(rid, authorityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthoritiesApi - factory interface
 * @export
 */
export const AuthoritiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthoritiesApiFp(configuration)
    return {
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 删除权限
         * @param {Array<number>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorities(requestBody: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAuthorities(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 删除应用权限
         * @param {string} cid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientAuthorities(cid: string, authorityId: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClientAuthorities(cid, authorityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 删除角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleAuthorities(rid: number, authorityId: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoleAuthorities(rid, authorityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取权限
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorities(id?: Array<number>, options?: any): AxiosPromise<Array<Authority>> {
            return localVarFp.getAuthorities(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientAuthorities(cid: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getClientAuthorities(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取角色权限
         * @param {number} rid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAuthorities(rid: number, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getRoleAuthorities(rid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientAuthorities(uid: number, cid: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getUserClientAuthorities(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 修改或添加权限
         * @param {Array<Authority>} authority 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAuthorities(authority: Array<Authority>, options?: any): AxiosPromise<void> {
            return localVarFp.setAuthorities(authority, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 添加应用权限
         * @param {string} cid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setClientAuthorities(cid: string, authorityId: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.setClientAuthorities(cid, authorityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 添加角色权限
         * @param {number} rid 
         * @param {Array<number>} authorityId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoleAuthorities(rid: number, authorityId: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.setRoleAuthorities(rid, authorityId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthoritiesApi - object-oriented interface
 * @export
 * @class AuthoritiesApi
 * @extends {BaseAPI}
 */
export class AuthoritiesApi extends BaseAPI {
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 删除权限
     * @param {Array<number>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public deleteAuthorities(requestBody: Array<number>, options?: any) {
        return AuthoritiesApiFp(this.configuration).deleteAuthorities(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 删除应用权限
     * @param {string} cid 
     * @param {Array<number>} authorityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public deleteClientAuthorities(cid: string, authorityId: Array<number>, options?: any) {
        return AuthoritiesApiFp(this.configuration).deleteClientAuthorities(cid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 删除角色权限
     * @param {number} rid 
     * @param {Array<number>} authorityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public deleteRoleAuthorities(rid: number, authorityId: Array<number>, options?: any) {
        return AuthoritiesApiFp(this.configuration).deleteRoleAuthorities(rid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取权限
     * @param {Array<number>} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public getAuthorities(id?: Array<number>, options?: any) {
        return AuthoritiesApiFp(this.configuration).getAuthorities(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public getClientAuthorities(cid: string, options?: any) {
        return AuthoritiesApiFp(this.configuration).getClientAuthorities(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取角色权限
     * @param {number} rid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public getRoleAuthorities(rid: number, options?: any) {
        return AuthoritiesApiFp(this.configuration).getRoleAuthorities(rid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public getUserClientAuthorities(uid: number, cid: string, options?: any) {
        return AuthoritiesApiFp(this.configuration).getUserClientAuthorities(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 修改或添加权限
     * @param {Array<Authority>} authority 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public setAuthorities(authority: Array<Authority>, options?: any) {
        return AuthoritiesApiFp(this.configuration).setAuthorities(authority, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 添加应用权限
     * @param {string} cid 
     * @param {Array<number>} authorityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public setClientAuthorities(cid: string, authorityId: Array<number>, options?: any) {
        return AuthoritiesApiFp(this.configuration).setClientAuthorities(cid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 添加角色权限
     * @param {number} rid 
     * @param {Array<number>} authorityId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    public setRoleAuthorities(rid: number, authorityId: Array<number>, options?: any) {
        return AuthoritiesApiFp(this.configuration).setRoleAuthorities(rid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 应用需要 AUTHORIZE 权限。
         * @summary 应用授权
         * @param {boolean} approved 
         * @param {Set<string>} [scope] 
         * @param {boolean} [jwt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorization: async (approved: boolean, scope?: Set<string>, jwt?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'approved' is not null or undefined
            assertParamExists('createAuthorization', 'approved', approved)
            const localVarPath = `/v1/oauth/authorization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }

            if (scope) {
                localVarQueryParameter['scope'] = Array.from(scope);
            }

            if (jwt !== undefined) {
                localVarQueryParameter['jwt'] = jwt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
         * @summary 获取应用授权
         * @param {string} clientId 
         * @param {string} [responseType] 
         * @param {string} [redirectUri] 
         * @param {Array<string>} [scope] 
         * @param {string} [state] 
         * @param {boolean} [jwt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorization: async (clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, jwt?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('getAuthorization', 'clientId', clientId)
            const localVarPath = `/v1/oauth/authorization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }

            if (scope) {
                localVarQueryParameter['scope'] = scope;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (jwt !== undefined) {
                localVarQueryParameter['jwt'] = jwt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 应用需要 AUTHORIZE 权限。
         * @summary 应用授权
         * @param {boolean} approved 
         * @param {Set<string>} [scope] 
         * @param {boolean} [jwt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthorization(approved: boolean, scope?: Set<string>, jwt?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthorization(approved, scope, jwt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
         * @summary 获取应用授权
         * @param {string} clientId 
         * @param {string} [responseType] 
         * @param {string} [redirectUri] 
         * @param {Array<string>} [scope] 
         * @param {string} [state] 
         * @param {boolean} [jwt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorization(clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, jwt?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorization(clientId, responseType, redirectUri, scope, state, jwt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizationApiFp(configuration)
    return {
        /**
         * 应用需要 AUTHORIZE 权限。
         * @summary 应用授权
         * @param {boolean} approved 
         * @param {Set<string>} [scope] 
         * @param {boolean} [jwt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorization(approved: boolean, scope?: Set<string>, jwt?: boolean, options?: any): AxiosPromise<AuthorizationResponse> {
            return localVarFp.createAuthorization(approved, scope, jwt, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
         * @summary 获取应用授权
         * @param {string} clientId 
         * @param {string} [responseType] 
         * @param {string} [redirectUri] 
         * @param {Array<string>} [scope] 
         * @param {string} [state] 
         * @param {boolean} [jwt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorization(clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, jwt?: boolean, options?: any): AxiosPromise<AuthorizationResponse> {
            return localVarFp.getAuthorization(clientId, responseType, redirectUri, scope, state, jwt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export class AuthorizationApi extends BaseAPI {
    /**
     * 应用需要 AUTHORIZE 权限。
     * @summary 应用授权
     * @param {boolean} approved 
     * @param {Set<string>} [scope] 
     * @param {boolean} [jwt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public createAuthorization(approved: boolean, scope?: Set<string>, jwt?: boolean, options?: any) {
        return AuthorizationApiFp(this.configuration).createAuthorization(approved, scope, jwt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
     * @summary 获取应用授权
     * @param {string} clientId 
     * @param {string} [responseType] 
     * @param {string} [redirectUri] 
     * @param {Array<string>} [scope] 
     * @param {string} [state] 
     * @param {boolean} [jwt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getAuthorization(clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, jwt?: boolean, options?: any) {
        return AuthorizationApiFp(this.configuration).getAuthorization(clientId, responseType, redirectUri, scope, state, jwt, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用成员
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientMembers: async (cid: string, uids: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('addClientMembers', 'cid', cid)
            // verify required parameter 'uids' is not null or undefined
            assertParamExists('addClientMembers', 'uids', uids)
            const localVarPath = `/v1/clients/{cid}/members`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (uids) {
                localVarQueryParameter['uids'] = uids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用成员
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientMembers: async (uid: number, cid: string, uids: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('addUserClientMembers', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('addUserClientMembers', 'cid', cid)
            // verify required parameter 'uids' is not null or undefined
            assertParamExists('addUserClientMembers', 'uids', uids)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/members`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (uids) {
                localVarQueryParameter['uids'] = uids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 创建应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} [scopes] 
         * @param {Array<number>} [grantTypes] 
         * @param {number} [accessTokenValidity] 
         * @param {number} [refreshTokenValidity] 
         * @param {string} [additionalInformation] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient: async (uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('createClient', 'uid', uid)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createClient', 'name', name)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('createClient', 'description', description)
            // verify required parameter 'redirectUri' is not null or undefined
            assertParamExists('createClient', 'redirectUri', redirectUri)
            const localVarPath = `/v1/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }

            if (scopes) {
                localVarQueryParameter['scopes'] = scopes;
            }

            if (grantTypes) {
                localVarQueryParameter['grantTypes'] = grantTypes;
            }

            if (accessTokenValidity !== undefined) {
                localVarQueryParameter['accessTokenValidity'] = accessTokenValidity;
            }

            if (refreshTokenValidity !== undefined) {
                localVarQueryParameter['refreshTokenValidity'] = refreshTokenValidity;
            }

            if (additionalInformation !== undefined) {
                localVarQueryParameter['additionalInformation'] = additionalInformation;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
         * @summary 创建用户应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} [scopes] 
         * @param {Array<number>} [grantTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserClient: async (uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('createUserClient', 'uid', uid)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createUserClient', 'name', name)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('createUserClient', 'description', description)
            // verify required parameter 'redirectUri' is not null or undefined
            assertParamExists('createUserClient', 'redirectUri', redirectUri)
            const localVarPath = `/v1/users/{uid}/clients`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }

            if (scopes) {
                localVarQueryParameter['scopes'] = scopes;
            }

            if (grantTypes) {
                localVarQueryParameter['grantTypes'] = grantTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getClient', 'cid', cid)
            const localVarPath = `/v1/clients/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取应用 Logo
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientLogo: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getClientLogo', 'cid', cid)
            const localVarPath = `/v1/clients/{cid}/logo`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 查询应用
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients: async (q?: string, order?: Array<string>, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (order) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClient: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserClient', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getUserClient', 'cid', cid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用 Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientLogo: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserClientLogo', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getUserClientLogo', 'cid', cid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/logo`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 查询用户应用
         * @param {number} uid 
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClients: async (uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserClients', 'uid', uid)
            const localVarPath = `/v1/users/{uid}/clients`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (order) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClient: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('removeClient', 'cid', cid)
            const localVarPath = `/v1/clients/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 移除应用成员
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientMembers: async (cid: string, uids: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('removeClientMembers', 'cid', cid)
            // verify required parameter 'uids' is not null or undefined
            assertParamExists('removeClientMembers', 'uids', uids)
            const localVarPath = `/v1/clients/{cid}/members`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (uids) {
                localVarQueryParameter['uids'] = uids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClients: async (cids: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cids' is not null or undefined
            assertParamExists('removeClients', 'cids', cids)
            const localVarPath = `/v1/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cids) {
                localVarQueryParameter['cids'] = cids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClient: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('removeUserClient', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('removeUserClient', 'cid', cid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 移除应用成员
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClientMembers: async (uid: number, cid: string, uids: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('removeUserClientMembers', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('removeUserClientMembers', 'cid', cid)
            // verify required parameter 'uids' is not null or undefined
            assertParamExists('removeUserClientMembers', 'uids', uids)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/members`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (uids) {
                localVarQueryParameter['uids'] = uids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid 
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClients: async (uid: number, cids: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('removeUserClients', 'uid', uid)
            // verify required parameter 'cids' is not null or undefined
            assertParamExists('removeUserClients', 'cids', cids)
            const localVarPath = `/v1/users/{uid}/clients`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cids) {
                localVarQueryParameter['cids'] = cids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用AccessToken有效期
         * @param {string} cid 
         * @param {number} accessTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientAccessTokenValidity: async (cid: string, accessTokenValidity: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateClientAccessTokenValidity', 'cid', cid)
            // verify required parameter 'accessTokenValidity' is not null or undefined
            assertParamExists('updateClientAccessTokenValidity', 'accessTokenValidity', accessTokenValidity)
            const localVarPath = `/v1/clients/{cid}/access-token-validity`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (accessTokenValidity !== undefined) {
                localVarQueryParameter['accessTokenValidity'] = accessTokenValidity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用描述
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientDescription: async (cid: string, description: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateClientDescription', 'cid', cid)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('updateClientDescription', 'description', description)
            const localVarPath = `/v1/clients/{cid}/description`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用 Logo
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientLogo: async (cid: string, body: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateClientLogo', 'cid', cid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateClientLogo', 'body', body)
            const localVarPath = `/v1/clients/{cid}/logo`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用名称
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientName: async (cid: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateClientName', 'cid', cid)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateClientName', 'name', name)
            const localVarPath = `/v1/clients/{cid}/name`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用回调地址
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRedirectUri: async (cid: string, redirectUri: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateClientRedirectUri', 'cid', cid)
            // verify required parameter 'redirectUri' is not null or undefined
            assertParamExists('updateClientRedirectUri', 'redirectUri', redirectUri)
            const localVarPath = `/v1/clients/{cid}/redirect`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用RefreshToken有效期
         * @param {string} cid 
         * @param {number} refreshTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRefreshTokenValidity: async (cid: string, refreshTokenValidity: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateClientRefreshTokenValidity', 'cid', cid)
            // verify required parameter 'refreshTokenValidity' is not null or undefined
            assertParamExists('updateClientRefreshTokenValidity', 'refreshTokenValidity', refreshTokenValidity)
            const localVarPath = `/v1/clients/{cid}/refresh-token-validity`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (refreshTokenValidity !== undefined) {
                localVarQueryParameter['refreshTokenValidity'] = refreshTokenValidity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用密钥
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateClientSecret', 'cid', cid)
            const localVarPath = `/v1/clients/{cid}/secret`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用状态
         * @param {string} cid 
         * @param {number} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientStatus: async (cid: string, status: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateClientStatus', 'cid', cid)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('updateClientStatus', 'status', status)
            const localVarPath = `/v1/clients/{cid}/status`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用描述
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientDescription: async (uid: number, cid: string, description: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserClientDescription', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateUserClientDescription', 'cid', cid)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('updateUserClientDescription', 'description', description)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/description`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用 Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientLogo: async (uid: number, cid: string, body: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserClientLogo', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateUserClientLogo', 'cid', cid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateUserClientLogo', 'body', body)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/logo`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用名称
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientName: async (uid: number, cid: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserClientName', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateUserClientName', 'cid', cid)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateUserClientName', 'name', name)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/name`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用回调地址
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientRedirectUri: async (uid: number, cid: string, redirectUri: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserClientRedirectUri', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateUserClientRedirectUri', 'cid', cid)
            // verify required parameter 'redirectUri' is not null or undefined
            assertParamExists('updateUserClientRedirectUri', 'redirectUri', redirectUri)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/redirect`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用密钥
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientSecret: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserClientSecret', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('updateUserClientSecret', 'cid', cid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/secret`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用成员
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addClientMembers(cid: string, uids: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addClientMembers(cid, uids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用成员
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserClientMembers(uid, cid, uids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 创建应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} [scopes] 
         * @param {Array<number>} [grantTypes] 
         * @param {number} [accessTokenValidity] 
         * @param {number} [refreshTokenValidity] 
         * @param {string} [additionalInformation] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
         * @summary 创建用户应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} [scopes] 
         * @param {Array<number>} [grantTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserClient(uid, name, description, redirectUri, scopes, grantTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClient(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClient(cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取应用 Logo
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientLogo(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientLogo(cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 查询应用
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClients(q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultsClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClients(q, order, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserClient(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserClient(uid, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用 Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserClientLogo(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserClientLogo(uid, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 查询用户应用
         * @param {number} uid 
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserClients(uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultsClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserClients(uid, q, order, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeClient(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeClient(cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 移除应用成员
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeClientMembers(cid: string, uids: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeClientMembers(cid, uids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeClients(cids: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeClients(cids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserClient(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserClient(uid, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 移除应用成员
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserClientMembers(uid, cid, uids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid 
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserClients(uid: number, cids: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserClients(uid, cids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用AccessToken有效期
         * @param {string} cid 
         * @param {number} accessTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientAccessTokenValidity(cid: string, accessTokenValidity: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientAccessTokenValidity(cid, accessTokenValidity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用描述
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientDescription(cid: string, description: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientDescription(cid, description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用 Logo
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientLogo(cid: string, body: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientLogo(cid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用名称
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientName(cid: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientName(cid, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用回调地址
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientRedirectUri(cid: string, redirectUri: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientRedirectUri(cid, redirectUri, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用RefreshToken有效期
         * @param {string} cid 
         * @param {number} refreshTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientRefreshTokenValidity(cid: string, refreshTokenValidity: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientRefreshTokenValidity(cid, refreshTokenValidity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用密钥
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientSecret(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientSecret(cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用状态
         * @param {string} cid 
         * @param {number} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientStatus(cid: string, status: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientStatus(cid, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用描述
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserClientDescription(uid: number, cid: string, description: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserClientDescription(uid, cid, description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用 Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserClientLogo(uid: number, cid: string, body: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserClientLogo(uid, cid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用名称
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserClientName(uid: number, cid: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserClientName(uid, cid, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用回调地址
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserClientRedirectUri(uid: number, cid: string, redirectUri: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserClientRedirectUri(uid, cid, redirectUri, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用密钥
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserClientSecret(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserClientSecret(uid, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用成员
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientMembers(cid: string, uids: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.addClientMembers(cid, uids, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用成员
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.addUserClientMembers(uid, cid, uids, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 创建应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} [scopes] 
         * @param {Array<number>} [grantTypes] 
         * @param {number} [accessTokenValidity] 
         * @param {number} [refreshTokenValidity] 
         * @param {string} [additionalInformation] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options?: any): AxiosPromise<Client> {
            return localVarFp.createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
         * @summary 创建用户应用
         * @param {number} uid 
         * @param {string} name 
         * @param {string} description 
         * @param {string} redirectUri 
         * @param {Array<number>} [scopes] 
         * @param {Array<number>} [grantTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, options?: any): AxiosPromise<Client> {
            return localVarFp.createUserClient(uid, name, description, redirectUri, scopes, grantTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(cid: string, options?: any): AxiosPromise<Client> {
            return localVarFp.getClient(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取应用 Logo
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientLogo(cid: string, options?: any): AxiosPromise<void> {
            return localVarFp.getClientLogo(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 查询应用
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients(q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): AxiosPromise<QueryResultsClient> {
            return localVarFp.getClients(q, order, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClient(uid: number, cid: string, options?: any): AxiosPromise<Client> {
            return localVarFp.getUserClient(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用 Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientLogo(uid: number, cid: string, options?: any): AxiosPromise<void> {
            return localVarFp.getUserClientLogo(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 查询用户应用
         * @param {number} uid 
         * @param {string} [q] 
         * @param {Array<string>} [order] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClients(uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): AxiosPromise<QueryResultsClient> {
            return localVarFp.getUserClients(uid, q, order, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClient(cid: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeClient(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 移除应用成员
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientMembers(cid: string, uids: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.removeClientMembers(cid, uids, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClients(cids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.removeClients(cids, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClient(uid: number, cid: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeUserClient(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 移除应用成员
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} uids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.removeUserClientMembers(uid, cid, uids, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid 
         * @param {Array<string>} cids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClients(uid: number, cids: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.removeUserClients(uid, cids, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用AccessToken有效期
         * @param {string} cid 
         * @param {number} accessTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientAccessTokenValidity(cid: string, accessTokenValidity: number, options?: any): AxiosPromise<void> {
            return localVarFp.updateClientAccessTokenValidity(cid, accessTokenValidity, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用描述
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientDescription(cid: string, description: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateClientDescription(cid, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用 Logo
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientLogo(cid: string, body: any, options?: any): AxiosPromise<void> {
            return localVarFp.updateClientLogo(cid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用名称
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientName(cid: string, name: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateClientName(cid, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用回调地址
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRedirectUri(cid: string, redirectUri: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateClientRedirectUri(cid, redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用RefreshToken有效期
         * @param {string} cid 
         * @param {number} refreshTokenValidity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRefreshTokenValidity(cid: string, refreshTokenValidity: number, options?: any): AxiosPromise<void> {
            return localVarFp.updateClientRefreshTokenValidity(cid, refreshTokenValidity, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用密钥
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret(cid: string, options?: any): AxiosPromise<string> {
            return localVarFp.updateClientSecret(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用状态
         * @param {string} cid 
         * @param {number} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientStatus(cid: string, status: number, options?: any): AxiosPromise<void> {
            return localVarFp.updateClientStatus(cid, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用描述
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} description 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientDescription(uid: number, cid: string, description: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserClientDescription(uid, cid, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用 Logo
         * @param {number} uid 
         * @param {string} cid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientLogo(uid: number, cid: string, body: any, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserClientLogo(uid, cid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用名称
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientName(uid: number, cid: string, name: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserClientName(uid, cid, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用回调地址
         * @param {number} uid 
         * @param {string} cid 
         * @param {string} redirectUri 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientRedirectUri(uid: number, cid: string, redirectUri: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserClientRedirectUri(uid, cid, redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用密钥
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientSecret(uid: number, cid: string, options?: any): AxiosPromise<string> {
            return localVarFp.updateUserClientSecret(uid, cid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用成员
     * @param {string} cid 
     * @param {Array<number>} uids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public addClientMembers(cid: string, uids: Array<number>, options?: any) {
        return ClientsApiFp(this.configuration).addClientMembers(cid, uids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用成员
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} uids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public addUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any) {
        return ClientsApiFp(this.configuration).addUserClientMembers(uid, cid, uids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 创建应用
     * @param {number} uid 
     * @param {string} name 
     * @param {string} description 
     * @param {string} redirectUri 
     * @param {Array<number>} [scopes] 
     * @param {Array<number>} [grantTypes] 
     * @param {number} [accessTokenValidity] 
     * @param {number} [refreshTokenValidity] 
     * @param {string} [additionalInformation] 
     * @param {number} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public createClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options?: any) {
        return ClientsApiFp(this.configuration).createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
     * @summary 创建用户应用
     * @param {number} uid 
     * @param {string} name 
     * @param {string} description 
     * @param {string} redirectUri 
     * @param {Array<number>} [scopes] 
     * @param {Array<number>} [grantTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public createUserClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, options?: any) {
        return ClientsApiFp(this.configuration).createUserClient(uid, name, description, redirectUri, scopes, grantTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getClient(cid: string, options?: any) {
        return ClientsApiFp(this.configuration).getClient(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取应用 Logo
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getClientLogo(cid: string, options?: any) {
        return ClientsApiFp(this.configuration).getClientLogo(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 查询应用
     * @param {string} [q] 
     * @param {Array<string>} [order] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getClients(q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any) {
        return ClientsApiFp(this.configuration).getClients(q, order, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getUserClient(uid: number, cid: string, options?: any) {
        return ClientsApiFp(this.configuration).getUserClient(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用 Logo
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getUserClientLogo(uid: number, cid: string, options?: any) {
        return ClientsApiFp(this.configuration).getUserClientLogo(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 查询用户应用
     * @param {number} uid 
     * @param {string} [q] 
     * @param {Array<string>} [order] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public getUserClients(uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any) {
        return ClientsApiFp(this.configuration).getUserClients(uid, q, order, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public removeClient(cid: string, options?: any) {
        return ClientsApiFp(this.configuration).removeClient(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 移除应用成员
     * @param {string} cid 
     * @param {Array<number>} uids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public removeClientMembers(cid: string, uids: Array<number>, options?: any) {
        return ClientsApiFp(this.configuration).removeClientMembers(cid, uids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {Array<string>} cids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public removeClients(cids: Array<string>, options?: any) {
        return ClientsApiFp(this.configuration).removeClients(cids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public removeUserClient(uid: number, cid: string, options?: any) {
        return ClientsApiFp(this.configuration).removeUserClient(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 移除应用成员
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} uids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public removeUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any) {
        return ClientsApiFp(this.configuration).removeUserClientMembers(uid, cid, uids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid 
     * @param {Array<string>} cids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public removeUserClients(uid: number, cids: Array<string>, options?: any) {
        return ClientsApiFp(this.configuration).removeUserClients(uid, cids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用AccessToken有效期
     * @param {string} cid 
     * @param {number} accessTokenValidity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateClientAccessTokenValidity(cid: string, accessTokenValidity: number, options?: any) {
        return ClientsApiFp(this.configuration).updateClientAccessTokenValidity(cid, accessTokenValidity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用描述
     * @param {string} cid 
     * @param {string} description 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateClientDescription(cid: string, description: string, options?: any) {
        return ClientsApiFp(this.configuration).updateClientDescription(cid, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用 Logo
     * @param {string} cid 
     * @param {any} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateClientLogo(cid: string, body: any, options?: any) {
        return ClientsApiFp(this.configuration).updateClientLogo(cid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用名称
     * @param {string} cid 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateClientName(cid: string, name: string, options?: any) {
        return ClientsApiFp(this.configuration).updateClientName(cid, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用回调地址
     * @param {string} cid 
     * @param {string} redirectUri 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateClientRedirectUri(cid: string, redirectUri: string, options?: any) {
        return ClientsApiFp(this.configuration).updateClientRedirectUri(cid, redirectUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用RefreshToken有效期
     * @param {string} cid 
     * @param {number} refreshTokenValidity 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateClientRefreshTokenValidity(cid: string, refreshTokenValidity: number, options?: any) {
        return ClientsApiFp(this.configuration).updateClientRefreshTokenValidity(cid, refreshTokenValidity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用密钥
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateClientSecret(cid: string, options?: any) {
        return ClientsApiFp(this.configuration).updateClientSecret(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用状态
     * @param {string} cid 
     * @param {number} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateClientStatus(cid: string, status: number, options?: any) {
        return ClientsApiFp(this.configuration).updateClientStatus(cid, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用描述
     * @param {number} uid 
     * @param {string} cid 
     * @param {string} description 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateUserClientDescription(uid: number, cid: string, description: string, options?: any) {
        return ClientsApiFp(this.configuration).updateUserClientDescription(uid, cid, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用 Logo
     * @param {number} uid 
     * @param {string} cid 
     * @param {any} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateUserClientLogo(uid: number, cid: string, body: any, options?: any) {
        return ClientsApiFp(this.configuration).updateUserClientLogo(uid, cid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用名称
     * @param {number} uid 
     * @param {string} cid 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateUserClientName(uid: number, cid: string, name: string, options?: any) {
        return ClientsApiFp(this.configuration).updateUserClientName(uid, cid, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用回调地址
     * @param {number} uid 
     * @param {string} cid 
     * @param {string} redirectUri 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateUserClientRedirectUri(uid: number, cid: string, redirectUri: string, options?: any) {
        return ClientsApiFp(this.configuration).updateUserClientRedirectUri(uid, cid, redirectUri, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用密钥
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public updateUserClientSecret(uid: number, cid: string, options?: any) {
        return ClientsApiFp(this.configuration).updateUserClientSecret(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CodeApi - axios parameter creator
 * @export
 */
export const CodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationCode: async (gRecaptchaResponse: string, email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            assertParamExists('createRegistrationCode', 'gRecaptchaResponse', gRecaptchaResponse)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createRegistrationCode', 'email', email)
            const localVarPath = `/v1/code/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationEmailCode: async (gRecaptchaResponse: string, email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            assertParamExists('createRegistrationEmailCode', 'gRecaptchaResponse', gRecaptchaResponse)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createRegistrationEmailCode', 'email', email)
            const localVarPath = `/v1/code/registration/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 发送验证码到手机，用于注册。
         * @summary 获取注册手机验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationPhoneCode: async (gRecaptchaResponse: string, phone: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            assertParamExists('createRegistrationPhoneCode', 'gRecaptchaResponse', gRecaptchaResponse)
            // verify required parameter 'phone' is not null or undefined
            assertParamExists('createRegistrationPhoneCode', 'phone', phone)
            const localVarPath = `/v1/code/registration/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 发送验证码到邮箱，用于更改邮箱。
         * @summary 获取更换邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdateEmailCode: async (gRecaptchaResponse: string, email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            assertParamExists('createUpdateEmailCode', 'gRecaptchaResponse', gRecaptchaResponse)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createUpdateEmailCode', 'email', email)
            const localVarPath = `/v1/code/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 发送验证码到邮箱，用于更改密码。
         * @summary 获取重置密码邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePasswordEmailCode: async (gRecaptchaResponse: string, email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            assertParamExists('createUpdatePasswordEmailCode', 'gRecaptchaResponse', gRecaptchaResponse)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createUpdatePasswordEmailCode', 'email', email)
            const localVarPath = `/v1/code/password/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 发送验证码到手机，用于更改密码。
         * @summary 获取重置密码手机验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePasswordPhoneCode: async (gRecaptchaResponse: string, phone: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            assertParamExists('createUpdatePasswordPhoneCode', 'gRecaptchaResponse', gRecaptchaResponse)
            // verify required parameter 'phone' is not null or undefined
            assertParamExists('createUpdatePasswordPhoneCode', 'phone', phone)
            const localVarPath = `/v1/code/password/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 发送验证码到手机，用于更改手机号码。
         * @summary 获取更换手机号码验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePhoneCode: async (gRecaptchaResponse: string, phone: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            assertParamExists('createUpdatePhoneCode', 'gRecaptchaResponse', gRecaptchaResponse)
            // verify required parameter 'phone' is not null or undefined
            assertParamExists('createUpdatePhoneCode', 'phone', phone)
            const localVarPath = `/v1/code/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CodeApi - functional programming interface
 * @export
 */
export const CodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRegistrationCode(gRecaptchaResponse: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRegistrationCode(gRecaptchaResponse, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRegistrationEmailCode(gRecaptchaResponse: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRegistrationEmailCode(gRecaptchaResponse, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 发送验证码到手机，用于注册。
         * @summary 获取注册手机验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRegistrationPhoneCode(gRecaptchaResponse: string, phone: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRegistrationPhoneCode(gRecaptchaResponse, phone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 发送验证码到邮箱，用于更改邮箱。
         * @summary 获取更换邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUpdateEmailCode(gRecaptchaResponse: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUpdateEmailCode(gRecaptchaResponse, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 发送验证码到邮箱，用于更改密码。
         * @summary 获取重置密码邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUpdatePasswordEmailCode(gRecaptchaResponse: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUpdatePasswordEmailCode(gRecaptchaResponse, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 发送验证码到手机，用于更改密码。
         * @summary 获取重置密码手机验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUpdatePasswordPhoneCode(gRecaptchaResponse: string, phone: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUpdatePasswordPhoneCode(gRecaptchaResponse, phone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 发送验证码到手机，用于更改手机号码。
         * @summary 获取更换手机号码验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUpdatePhoneCode(gRecaptchaResponse: string, phone: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUpdatePhoneCode(gRecaptchaResponse, phone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CodeApi - factory interface
 * @export
 */
export const CodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CodeApiFp(configuration)
    return {
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationCode(gRecaptchaResponse: string, email: string, options?: any): AxiosPromise<void> {
            return localVarFp.createRegistrationCode(gRecaptchaResponse, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationEmailCode(gRecaptchaResponse: string, email: string, options?: any): AxiosPromise<void> {
            return localVarFp.createRegistrationEmailCode(gRecaptchaResponse, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到手机，用于注册。
         * @summary 获取注册手机验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationPhoneCode(gRecaptchaResponse: string, phone: string, options?: any): AxiosPromise<void> {
            return localVarFp.createRegistrationPhoneCode(gRecaptchaResponse, phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到邮箱，用于更改邮箱。
         * @summary 获取更换邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdateEmailCode(gRecaptchaResponse: string, email: string, options?: any): AxiosPromise<void> {
            return localVarFp.createUpdateEmailCode(gRecaptchaResponse, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到邮箱，用于更改密码。
         * @summary 获取重置密码邮箱验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePasswordEmailCode(gRecaptchaResponse: string, email: string, options?: any): AxiosPromise<void> {
            return localVarFp.createUpdatePasswordEmailCode(gRecaptchaResponse, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到手机，用于更改密码。
         * @summary 获取重置密码手机验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePasswordPhoneCode(gRecaptchaResponse: string, phone: string, options?: any): AxiosPromise<void> {
            return localVarFp.createUpdatePasswordPhoneCode(gRecaptchaResponse, phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到手机，用于更改手机号码。
         * @summary 获取更换手机号码验证码
         * @param {string} gRecaptchaResponse 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePhoneCode(gRecaptchaResponse: string, phone: string, options?: any): AxiosPromise<void> {
            return localVarFp.createUpdatePhoneCode(gRecaptchaResponse, phone, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CodeApi - object-oriented interface
 * @export
 * @class CodeApi
 * @extends {BaseAPI}
 */
export class CodeApi extends BaseAPI {
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public createRegistrationCode(gRecaptchaResponse: string, email: string, options?: any) {
        return CodeApiFp(this.configuration).createRegistrationCode(gRecaptchaResponse, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public createRegistrationEmailCode(gRecaptchaResponse: string, email: string, options?: any) {
        return CodeApiFp(this.configuration).createRegistrationEmailCode(gRecaptchaResponse, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 发送验证码到手机，用于注册。
     * @summary 获取注册手机验证码
     * @param {string} gRecaptchaResponse 
     * @param {string} phone 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public createRegistrationPhoneCode(gRecaptchaResponse: string, phone: string, options?: any) {
        return CodeApiFp(this.configuration).createRegistrationPhoneCode(gRecaptchaResponse, phone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 发送验证码到邮箱，用于更改邮箱。
     * @summary 获取更换邮箱验证码
     * @param {string} gRecaptchaResponse 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public createUpdateEmailCode(gRecaptchaResponse: string, email: string, options?: any) {
        return CodeApiFp(this.configuration).createUpdateEmailCode(gRecaptchaResponse, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 发送验证码到邮箱，用于更改密码。
     * @summary 获取重置密码邮箱验证码
     * @param {string} gRecaptchaResponse 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public createUpdatePasswordEmailCode(gRecaptchaResponse: string, email: string, options?: any) {
        return CodeApiFp(this.configuration).createUpdatePasswordEmailCode(gRecaptchaResponse, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 发送验证码到手机，用于更改密码。
     * @summary 获取重置密码手机验证码
     * @param {string} gRecaptchaResponse 
     * @param {string} phone 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public createUpdatePasswordPhoneCode(gRecaptchaResponse: string, phone: string, options?: any) {
        return CodeApiFp(this.configuration).createUpdatePasswordPhoneCode(gRecaptchaResponse, phone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 发送验证码到手机，用于更改手机号码。
     * @summary 获取更换手机号码验证码
     * @param {string} gRecaptchaResponse 
     * @param {string} phone 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public createUpdatePhoneCode(gRecaptchaResponse: string, phone: string, options?: any) {
        return CodeApiFp(this.configuration).createUpdatePhoneCode(gRecaptchaResponse, phone, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GrantTypesApi - axios parameter creator
 * @export
 */
export const GrantTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientGrantTypes: async (cid: string, tid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('addClientGrantTypes', 'cid', cid)
            // verify required parameter 'tid' is not null or undefined
            assertParamExists('addClientGrantTypes', 'tid', tid)
            const localVarPath = `/v1/clients/{cid}/types`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientGrantTypes: async (uid: number, cid: string, tid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('addUserClientGrantTypes', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('addUserClientGrantTypes', 'cid', cid)
            // verify required parameter 'tid' is not null or undefined
            assertParamExists('addUserClientGrantTypes', 'tid', tid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/types`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientGrantTypes: async (cid: string, tid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('deleteClientGrantTypes', 'cid', cid)
            // verify required parameter 'tid' is not null or undefined
            assertParamExists('deleteClientGrantTypes', 'tid', tid)
            const localVarPath = `/v1/clients/{cid}/types`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 删除授权模式
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantTypes: async (tid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tid' is not null or undefined
            assertParamExists('deleteGrantTypes', 'tid', tid)
            const localVarPath = `/v1/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserClientGrantTypes: async (uid: number, cid: string, tid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('deleteUserClientGrantTypes', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('deleteUserClientGrantTypes', 'cid', cid)
            // verify required parameter 'tid' is not null or undefined
            assertParamExists('deleteUserClientGrantTypes', 'tid', tid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/types`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientGrantTypes: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getClientGrantTypes', 'cid', cid)
            const localVarPath = `/v1/clients/{cid}/types`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取授权模式
         * @param {Array<number>} [tid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantTypes: async (tid?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientGrantTypes: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserClientGrantTypes', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getUserClientGrantTypes', 'cid', cid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/types`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 添加或修改授权模式
         * @param {Array<GrantType>} grantType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGrantTypes: async (grantType: Array<GrantType>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('setGrantTypes', 'grantType', grantType)
            const localVarPath = `/v1/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(grantType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GrantTypesApi - functional programming interface
 * @export
 */
export const GrantTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GrantTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addClientGrantTypes(cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addClientGrantTypes(cid, tid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserClientGrantTypes(uid, cid, tid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClientGrantTypes(cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClientGrantTypes(cid, tid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 删除授权模式
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGrantTypes(tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGrantTypes(tid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserClientGrantTypes(uid, cid, tid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientGrantTypes(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GrantType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientGrantTypes(cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取授权模式
         * @param {Array<number>} [tid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGrantTypes(tid?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GrantType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGrantTypes(tid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserClientGrantTypes(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GrantType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserClientGrantTypes(uid, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 添加或修改授权模式
         * @param {Array<GrantType>} grantType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setGrantTypes(grantType: Array<GrantType>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setGrantTypes(grantType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GrantTypesApi - factory interface
 * @export
 */
export const GrantTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GrantTypesApiFp(configuration)
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientGrantTypes(cid: string, tid: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.addClientGrantTypes(cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.addUserClientGrantTypes(uid, cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientGrantTypes(cid: string, tid: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClientGrantTypes(cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 删除授权模式
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantTypes(tid: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGrantTypes(tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} tid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserClientGrantTypes(uid, cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientGrantTypes(cid: string, options?: any): AxiosPromise<Array<GrantType>> {
            return localVarFp.getClientGrantTypes(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取授权模式
         * @param {Array<number>} [tid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantTypes(tid?: Array<number>, options?: any): AxiosPromise<Array<GrantType>> {
            return localVarFp.getGrantTypes(tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientGrantTypes(uid: number, cid: string, options?: any): AxiosPromise<Array<GrantType>> {
            return localVarFp.getUserClientGrantTypes(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 添加或修改授权模式
         * @param {Array<GrantType>} grantType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGrantTypes(grantType: Array<GrantType>, options?: any): AxiosPromise<void> {
            return localVarFp.setGrantTypes(grantType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GrantTypesApi - object-oriented interface
 * @export
 * @class GrantTypesApi
 * @extends {BaseAPI}
 */
export class GrantTypesApi extends BaseAPI {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {string} cid 
     * @param {Array<number>} tid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    public addClientGrantTypes(cid: string, tid: Array<number>, options?: any) {
        return GrantTypesApiFp(this.configuration).addClientGrantTypes(cid, tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} tid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    public addUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any) {
        return GrantTypesApiFp(this.configuration).addUserClientGrantTypes(uid, cid, tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {string} cid 
     * @param {Array<number>} tid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    public deleteClientGrantTypes(cid: string, tid: Array<number>, options?: any) {
        return GrantTypesApiFp(this.configuration).deleteClientGrantTypes(cid, tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 删除授权模式
     * @param {Array<number>} tid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    public deleteGrantTypes(tid: Array<number>, options?: any) {
        return GrantTypesApiFp(this.configuration).deleteGrantTypes(tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} tid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    public deleteUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any) {
        return GrantTypesApiFp(this.configuration).deleteUserClientGrantTypes(uid, cid, tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    public getClientGrantTypes(cid: string, options?: any) {
        return GrantTypesApiFp(this.configuration).getClientGrantTypes(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取授权模式
     * @param {Array<number>} [tid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    public getGrantTypes(tid?: Array<number>, options?: any) {
        return GrantTypesApiFp(this.configuration).getGrantTypes(tid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    public getUserClientGrantTypes(uid: number, cid: string, options?: any) {
        return GrantTypesApiFp(this.configuration).getUserClientGrantTypes(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 添加或修改授权模式
     * @param {Array<GrantType>} grantType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    public setGrantTypes(grantType: Array<GrantType>, options?: any) {
        return GrantTypesApiFp(this.configuration).setGrantTypes(grantType, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 删除角色
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoles: async (id: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRoles', 'id', id)
            const localVarPath = `/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 删除用户的角色
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserClientRoles: async (uid: number, cid: string, id: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('deleteUserClientRoles', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('deleteUserClientRoles', 'cid', cid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserClientRoles', 'id', id)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 删除用户的角色
         * @param {number} uid 
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoles: async (uid: number, id: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('deleteUserRoles', 'uid', uid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserRoles', 'id', id)
            const localVarPath = `/v1/users/{uid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取角色
         * @param {string} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientRoles: async (clientId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('getClientRoles', 'clientId', clientId)
            const localVarPath = `/v1/clients/{clientId}/roles`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取角色
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: async (id?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用需要 READ_USER 权限。
         * @summary 获取用户角色
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientRoles: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserClientRoles', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getUserClientRoles', 'cid', cid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用需要 READ_USER 权限。
         * @summary 获取用户的角色应用
         * @param {number} uid 
         * @param {boolean} [managed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoleClients: async (uid: number, managed?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserRoleClients', 'uid', uid)
            const localVarPath = `/v1/users/{uid}/role-clients`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (managed !== undefined) {
                localVarQueryParameter['managed'] = managed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
         * @summary 获取用户角色
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoles: async (uid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserRoles', 'uid', uid)
            const localVarPath = `/v1/users/{uid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 修改或添加角色
         * @param {Array<Role>} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoles: async (role: Array<Role>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('setRoles', 'role', role)
            const localVarPath = `/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(role, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 为用户添加角色
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<UserRole>} userRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserClientRoles: async (uid: number, cid: string, userRole: Array<UserRole>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('setUserClientRoles', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('setUserClientRoles', 'cid', cid)
            // verify required parameter 'userRole' is not null or undefined
            assertParamExists('setUserClientRoles', 'userRole', userRole)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRole, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 为用户添加角色
         * @param {number} uid 
         * @param {Array<UserRole>} userRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserRoles: async (uid: number, userRole: Array<UserRole>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('setUserRoles', 'uid', uid)
            // verify required parameter 'userRole' is not null or undefined
            assertParamExists('setUserRoles', 'userRole', userRole)
            const localVarPath = `/v1/users/{uid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRole, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 删除角色
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoles(id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoles(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 删除用户的角色
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserClientRoles(uid: number, cid: string, id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserClientRoles(uid, cid, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 删除用户的角色
         * @param {number} uid 
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserRoles(uid: number, id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserRoles(uid, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取角色
         * @param {string} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientRoles(clientId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientRoles(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取角色
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(id?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoles(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用需要 READ_USER 权限。
         * @summary 获取用户角色
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserClientRoles(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserClientRoles(uid, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用需要 READ_USER 权限。
         * @summary 获取用户的角色应用
         * @param {number} uid 
         * @param {boolean} [managed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRoleClients(uid: number, managed?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserRoleClient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRoleClients(uid, managed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
         * @summary 获取用户角色
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRoles(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRoles(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 修改或添加角色
         * @param {Array<Role>} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRoles(role: Array<Role>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRoles(role, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 为用户添加角色
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<UserRole>} userRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setUserClientRoles(uid: number, cid: string, userRole: Array<UserRole>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setUserClientRoles(uid, cid, userRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 为用户添加角色
         * @param {number} uid 
         * @param {Array<UserRole>} userRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setUserRoles(uid: number, userRole: Array<UserRole>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setUserRoles(uid, userRole, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 删除角色
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoles(id: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoles(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 删除用户的角色
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserClientRoles(uid: number, cid: string, id: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserClientRoles(uid, cid, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 删除用户的角色
         * @param {number} uid 
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoles(uid: number, id: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserRoles(uid, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取角色
         * @param {string} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientRoles(clientId: string, options?: any): AxiosPromise<Array<Role>> {
            return localVarFp.getClientRoles(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取角色
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(id?: Array<number>, options?: any): AxiosPromise<Array<Role>> {
            return localVarFp.getRoles(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用需要 READ_USER 权限。
         * @summary 获取用户角色
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientRoles(uid: number, cid: string, options?: any): AxiosPromise<Array<Role>> {
            return localVarFp.getUserClientRoles(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用需要 READ_USER 权限。
         * @summary 获取用户的角色应用
         * @param {number} uid 
         * @param {boolean} [managed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoleClients(uid: number, managed?: boolean, options?: any): AxiosPromise<Array<UserRoleClient>> {
            return localVarFp.getUserRoleClients(uid, managed, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
         * @summary 获取用户角色
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoles(uid: number, options?: any): AxiosPromise<Array<Role>> {
            return localVarFp.getUserRoles(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 修改或添加角色
         * @param {Array<Role>} role 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoles(role: Array<Role>, options?: any): AxiosPromise<void> {
            return localVarFp.setRoles(role, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 为用户添加角色
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<UserRole>} userRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserClientRoles(uid: number, cid: string, userRole: Array<UserRole>, options?: any): AxiosPromise<void> {
            return localVarFp.setUserClientRoles(uid, cid, userRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 为用户添加角色
         * @param {number} uid 
         * @param {Array<UserRole>} userRole 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserRoles(uid: number, userRole: Array<UserRole>, options?: any): AxiosPromise<void> {
            return localVarFp.setUserRoles(uid, userRole, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 删除角色
     * @param {Array<number>} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public deleteRoles(id: Array<number>, options?: any) {
        return RolesApiFp(this.configuration).deleteRoles(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public deleteUserClientRoles(uid: number, cid: string, id: Array<number>, options?: any) {
        return RolesApiFp(this.configuration).deleteUserClientRoles(uid, cid, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid 
     * @param {Array<number>} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public deleteUserRoles(uid: number, id: Array<number>, options?: any) {
        return RolesApiFp(this.configuration).deleteUserRoles(uid, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取角色
     * @param {string} clientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getClientRoles(clientId: string, options?: any) {
        return RolesApiFp(this.configuration).getClientRoles(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取角色
     * @param {Array<number>} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getRoles(id?: Array<number>, options?: any) {
        return RolesApiFp(this.configuration).getRoles(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getUserClientRoles(uid: number, cid: string, options?: any) {
        return RolesApiFp(this.configuration).getUserClientRoles(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用需要 READ_USER 权限。
     * @summary 获取用户的角色应用
     * @param {number} uid 
     * @param {boolean} [managed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getUserRoleClients(uid: number, managed?: boolean, options?: any) {
        return RolesApiFp(this.configuration).getUserRoleClients(uid, managed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getUserRoles(uid: number, options?: any) {
        return RolesApiFp(this.configuration).getUserRoles(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 修改或添加角色
     * @param {Array<Role>} role 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public setRoles(role: Array<Role>, options?: any) {
        return RolesApiFp(this.configuration).setRoles(role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<UserRole>} userRole 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public setUserClientRoles(uid: number, cid: string, userRole: Array<UserRole>, options?: any) {
        return RolesApiFp(this.configuration).setUserClientRoles(uid, cid, userRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid 
     * @param {Array<UserRole>} userRole 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public setUserRoles(uid: number, userRole: Array<UserRole>, options?: any) {
        return RolesApiFp(this.configuration).setUserRoles(uid, userRole, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScopesApi - axios parameter creator
 * @export
 */
export const ScopesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientScopes: async (cid: string, sid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('addClientScopes', 'cid', cid)
            // verify required parameter 'sid' is not null or undefined
            assertParamExists('addClientScopes', 'sid', sid)
            const localVarPath = `/v1/clients/{cid}/scopes`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientScopes: async (uid: number, cid: string, sid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('addUserClientScopes', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('addUserClientScopes', 'cid', cid)
            // verify required parameter 'sid' is not null or undefined
            assertParamExists('addUserClientScopes', 'sid', sid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/scopes`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 删除授权作用域
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScopes: async (id: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteScopes', 'id', id)
            const localVarPath = `/v1/scopes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientScopes: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getClientScopes', 'cid', cid)
            const localVarPath = `/v1/clients/{cid}/scopes`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取授权作用域
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopes: async (id?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/scopes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientScopes: async (uid: number, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserClientScopes', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('getUserClientScopes', 'cid', cid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/scopes`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientScopes: async (cid: string, sid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('removeClientScopes', 'cid', cid)
            // verify required parameter 'sid' is not null or undefined
            assertParamExists('removeClientScopes', 'sid', sid)
            const localVarPath = `/v1/clients/{cid}/scopes`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClientScopes: async (uid: number, cid: string, sid: Array<number>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('removeUserClientScopes', 'uid', uid)
            // verify required parameter 'cid' is not null or undefined
            assertParamExists('removeUserClientScopes', 'cid', cid)
            // verify required parameter 'sid' is not null or undefined
            assertParamExists('removeUserClientScopes', 'sid', sid)
            const localVarPath = `/v1/users/{uid}/clients/{cid}/scopes`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 修改或添加授权作用域
         * @param {Array<Scope>} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopes: async (scope: Array<Scope>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('setScopes', 'scope', scope)
            const localVarPath = `/v1/scopes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scope, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScopesApi - functional programming interface
 * @export
 */
export const ScopesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScopesApiAxiosParamCreator(configuration)
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addClientScopes(cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addClientScopes(cid, sid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserClientScopes(uid, cid, sid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 删除授权作用域
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScopes(id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScopes(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientScopes(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientScopes(cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取授权作用域
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScopes(id?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScopes(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserClientScopes(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserClientScopes(uid, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeClientScopes(cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeClientScopes(cid, sid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserClientScopes(uid, cid, sid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 修改或添加授权作用域
         * @param {Array<Scope>} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setScopes(scope: Array<Scope>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setScopes(scope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScopesApi - factory interface
 * @export
 */
export const ScopesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScopesApiFp(configuration)
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientScopes(cid: string, sid: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.addClientScopes(cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.addUserClientScopes(uid, cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 删除授权作用域
         * @param {Array<number>} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScopes(id: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteScopes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientScopes(cid: string, options?: any): AxiosPromise<Array<Scope>> {
            return localVarFp.getClientScopes(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取授权作用域
         * @param {Array<number>} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopes(id?: Array<number>, options?: any): AxiosPromise<Array<Scope>> {
            return localVarFp.getScopes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientScopes(uid: number, cid: string, options?: any): AxiosPromise<Array<Scope>> {
            return localVarFp.getUserClientScopes(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientScopes(cid: string, sid: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.removeClientScopes(cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {number} uid 
         * @param {string} cid 
         * @param {Array<number>} sid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): AxiosPromise<void> {
            return localVarFp.removeUserClientScopes(uid, cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 修改或添加授权作用域
         * @param {Array<Scope>} scope 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopes(scope: Array<Scope>, options?: any): AxiosPromise<void> {
            return localVarFp.setScopes(scope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScopesApi - object-oriented interface
 * @export
 * @class ScopesApi
 * @extends {BaseAPI}
 */
export class ScopesApi extends BaseAPI {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {string} cid 
     * @param {Array<number>} sid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    public addClientScopes(cid: string, sid: Array<number>, options?: any) {
        return ScopesApiFp(this.configuration).addClientScopes(cid, sid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} sid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    public addUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any) {
        return ScopesApiFp(this.configuration).addUserClientScopes(uid, cid, sid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 删除授权作用域
     * @param {Array<number>} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    public deleteScopes(id: Array<number>, options?: any) {
        return ScopesApiFp(this.configuration).deleteScopes(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    public getClientScopes(cid: string, options?: any) {
        return ScopesApiFp(this.configuration).getClientScopes(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取授权作用域
     * @param {Array<number>} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    public getScopes(id?: Array<number>, options?: any) {
        return ScopesApiFp(this.configuration).getScopes(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {number} uid 
     * @param {string} cid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    public getUserClientScopes(uid: number, cid: string, options?: any) {
        return ScopesApiFp(this.configuration).getUserClientScopes(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {string} cid 
     * @param {Array<number>} sid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    public removeClientScopes(cid: string, sid: Array<number>, options?: any) {
        return ScopesApiFp(this.configuration).removeClientScopes(cid, sid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {number} uid 
     * @param {string} cid 
     * @param {Array<number>} sid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    public removeUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any) {
        return ScopesApiFp(this.configuration).removeUserClientScopes(uid, cid, sid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 修改或添加授权作用域
     * @param {Array<Scope>} scope 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    public setScopes(scope: Array<Scope>, options?: any) {
        return ScopesApiFp(this.configuration).setScopes(scope, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TokenApi - axios parameter creator
 * @export
 */
export const TokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 检查令牌有效性
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOAuthToken: async (token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('checkOAuthToken', 'token', token)
            const localVarPath = `/v1/token/validity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查令牌有效性
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOAuthTokenPost: async (token?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/token/validity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (token !== undefined) { 
                localVarFormParams.set('token', token as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除令牌
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToken: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取 JWT 公钥（JWK）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwk: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/jwk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取签名 JWT（JWS）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJws: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/jws`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 颁发签名 JWT（JWS）
         * @param {string} [code] 
         * @param {string} [grantType] 
         * @param {string} [redirectUri] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantJws: async (code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/jws`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (grantType !== undefined) {
                localVarQueryParameter['grant_type'] = grantType;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 颁发 OAuth2 令牌
         * @param {string} [code] 
         * @param {string} [grantType] 
         * @param {string} [redirectUri] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantOAuthToken: async (code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/oauth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ClientCredentials required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (grantType !== undefined) {
                localVarQueryParameter['grant_type'] = grantType;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 颁发默认令牌
         * @param {string} username 
         * @param {string} password 
         * @param {string} gRecaptchaResponse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantToken: async (username: string, password: string, gRecaptchaResponse: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('grantToken', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('grantToken', 'password', password)
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            assertParamExists('grantToken', 'gRecaptchaResponse', gRecaptchaResponse)
            const localVarPath = `/v1/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenApi - functional programming interface
 * @export
 */
export const TokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 检查令牌有效性
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkOAuthToken(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkOAuthToken(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 检查令牌有效性
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkOAuthTokenPost(token?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkOAuthTokenPost(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除令牌
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteToken(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取 JWT 公钥（JWK）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJwk(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJwk(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取签名 JWT（JWS）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJws(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2AccessToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJws(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 颁发签名 JWT（JWS）
         * @param {string} [code] 
         * @param {string} [grantType] 
         * @param {string} [redirectUri] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantJws(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2AccessToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grantJws(code, grantType, redirectUri, username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 颁发 OAuth2 令牌
         * @param {string} [code] 
         * @param {string} [grantType] 
         * @param {string} [redirectUri] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantOAuthToken(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2AccessToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grantOAuthToken(code, grantType, redirectUri, username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 颁发默认令牌
         * @param {string} username 
         * @param {string} password 
         * @param {string} gRecaptchaResponse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantToken(username: string, password: string, gRecaptchaResponse: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2AccessToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grantToken(username, password, gRecaptchaResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenApi - factory interface
 * @export
 */
export const TokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenApiFp(configuration)
    return {
        /**
         * 
         * @summary 检查令牌有效性
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOAuthToken(token: string, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.checkOAuthToken(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检查令牌有效性
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOAuthTokenPost(token?: string, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.checkOAuthTokenPost(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除令牌
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToken(options?: any): AxiosPromise<void> {
            return localVarFp.deleteToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取 JWT 公钥（JWK）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwk(options?: any): AxiosPromise<object> {
            return localVarFp.getJwk(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取签名 JWT（JWS）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJws(options?: any): AxiosPromise<OAuth2AccessToken> {
            return localVarFp.getJws(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 颁发签名 JWT（JWS）
         * @param {string} [code] 
         * @param {string} [grantType] 
         * @param {string} [redirectUri] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantJws(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any): AxiosPromise<OAuth2AccessToken> {
            return localVarFp.grantJws(code, grantType, redirectUri, username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 颁发 OAuth2 令牌
         * @param {string} [code] 
         * @param {string} [grantType] 
         * @param {string} [redirectUri] 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantOAuthToken(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any): AxiosPromise<OAuth2AccessToken> {
            return localVarFp.grantOAuthToken(code, grantType, redirectUri, username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 颁发默认令牌
         * @param {string} username 
         * @param {string} password 
         * @param {string} gRecaptchaResponse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantToken(username: string, password: string, gRecaptchaResponse: string, options?: any): AxiosPromise<OAuth2AccessToken> {
            return localVarFp.grantToken(username, password, gRecaptchaResponse, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TokenApi - object-oriented interface
 * @export
 * @class TokenApi
 * @extends {BaseAPI}
 */
export class TokenApi extends BaseAPI {
    /**
     * 
     * @summary 检查令牌有效性
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public checkOAuthToken(token: string, options?: any) {
        return TokenApiFp(this.configuration).checkOAuthToken(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查令牌有效性
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public checkOAuthTokenPost(token?: string, options?: any) {
        return TokenApiFp(this.configuration).checkOAuthTokenPost(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除令牌
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public deleteToken(options?: any) {
        return TokenApiFp(this.configuration).deleteToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取 JWT 公钥（JWK）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public getJwk(options?: any) {
        return TokenApiFp(this.configuration).getJwk(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取签名 JWT（JWS）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public getJws(options?: any) {
        return TokenApiFp(this.configuration).getJws(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 颁发签名 JWT（JWS）
     * @param {string} [code] 
     * @param {string} [grantType] 
     * @param {string} [redirectUri] 
     * @param {string} [username] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public grantJws(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any) {
        return TokenApiFp(this.configuration).grantJws(code, grantType, redirectUri, username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 颁发 OAuth2 令牌
     * @param {string} [code] 
     * @param {string} [grantType] 
     * @param {string} [redirectUri] 
     * @param {string} [username] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public grantOAuthToken(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any) {
        return TokenApiFp(this.configuration).grantOAuthToken(code, grantType, redirectUri, username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 颁发默认令牌
     * @param {string} username 
     * @param {string} password 
     * @param {string} gRecaptchaResponse 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public grantToken(username: string, password: string, gRecaptchaResponse: string, options?: any) {
        return TokenApiFp(this.configuration).grantToken(username, password, gRecaptchaResponse, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 应用需要拥有 read:user 授权。
         * @summary 获取当前 Token 的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查邮箱是否存在
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isEmailExists: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('isEmailExists', 'email', email)
            const localVarPath = `/v1/email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查手机号码是否存在
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isPhoneExists: async (phone: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'phone' is not null or undefined
            assertParamExists('isPhoneExists', 'phone', phone)
            const localVarPath = `/v1/phone/{phone}`
                .replace(`{${"phone"}}`, encodeURIComponent(String(phone)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查用户名是否存在
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUsernameExists: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('isUsernameExists', 'username', username)
            const localVarPath = `/v1/username/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户注册（通过邮箱验证码或者手机号）
         * @param {string} username 
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (username: string, password: string, code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('register', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('register', 'password', password)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('register', 'code', code)
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用需要 WRITE_USER_EMAIL 权限。
         * @summary 通过密码更改邮箱
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetEmail: async (password: string, code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'password' is not null or undefined
            assertParamExists('resetEmail', 'password', password)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('resetEmail', 'code', code)
            const localVarPath = `/v1/user/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用需要 WRITE_USER_PASSWORD 权限。
         * @summary 通过原密码更改用户密码
         * @param {string} oldPassword 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (oldPassword: string, newPassword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'oldPassword' is not null or undefined
            assertParamExists('resetPassword', 'oldPassword', oldPassword)
            // verify required parameter 'newPassword' is not null or undefined
            assertParamExists('resetPassword', 'newPassword', newPassword)
            const localVarPath = `/v1/user/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oldPassword !== undefined) {
                localVarQueryParameter['oldPassword'] = oldPassword;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['newPassword'] = newPassword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 邮箱或手机重置密码
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword1: async (password: string, code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'password' is not null or undefined
            assertParamExists('resetPassword1', 'password', password)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('resetPassword1', 'code', code)
            const localVarPath = `/v1/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用需要 WRITE_USER_PHONE 权限。
         * @summary 通过密码更改手机号码
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPhone: async (password: string, code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'password' is not null or undefined
            assertParamExists('resetPhone', 'password', password)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('resetPhone', 'code', code)
            const localVarPath = `/v1/user/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 应用需要拥有 read:user 授权。
         * @summary 获取当前 Token 的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokenUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 检查邮箱是否存在
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isEmailExists(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isEmailExists(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 检查手机号码是否存在
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isPhoneExists(phone: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isPhoneExists(phone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 检查用户名是否存在
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isUsernameExists(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isUsernameExists(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 用户注册（通过邮箱验证码或者手机号）
         * @param {string} username 
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(username: string, password: string, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(username, password, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用需要 WRITE_USER_EMAIL 权限。
         * @summary 通过密码更改邮箱
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetEmail(password: string, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetEmail(password, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用需要 WRITE_USER_PASSWORD 权限。
         * @summary 通过原密码更改用户密码
         * @param {string} oldPassword 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(oldPassword: string, newPassword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(oldPassword, newPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 邮箱或手机重置密码
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword1(password: string, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword1(password, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用需要 WRITE_USER_PHONE 权限。
         * @summary 通过密码更改手机号码
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPhone(password: string, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPhone(password, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 应用需要拥有 read:user 授权。
         * @summary 获取当前 Token 的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenUser(options?: any): AxiosPromise<User> {
            return localVarFp.getTokenUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检查邮箱是否存在
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isEmailExists(email: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.isEmailExists(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检查手机号码是否存在
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isPhoneExists(phone: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.isPhoneExists(phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 检查用户名是否存在
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUsernameExists(username: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.isUsernameExists(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户注册（通过邮箱验证码或者手机号）
         * @param {string} username 
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(username: string, password: string, code: string, options?: any): AxiosPromise<User> {
            return localVarFp.register(username, password, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用需要 WRITE_USER_EMAIL 权限。
         * @summary 通过密码更改邮箱
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetEmail(password: string, code: string, options?: any): AxiosPromise<void> {
            return localVarFp.resetEmail(password, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用需要 WRITE_USER_PASSWORD 权限。
         * @summary 通过原密码更改用户密码
         * @param {string} oldPassword 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(oldPassword: string, newPassword: string, options?: any): AxiosPromise<void> {
            return localVarFp.resetPassword(oldPassword, newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 邮箱或手机重置密码
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword1(password: string, code: string, options?: any): AxiosPromise<void> {
            return localVarFp.resetPassword1(password, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用需要 WRITE_USER_PHONE 权限。
         * @summary 通过密码更改手机号码
         * @param {string} password 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPhone(password: string, code: string, options?: any): AxiosPromise<void> {
            return localVarFp.resetPhone(password, code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 应用需要拥有 read:user 授权。
     * @summary 获取当前 Token 的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getTokenUser(options?: any) {
        return UserApiFp(this.configuration).getTokenUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查邮箱是否存在
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public isEmailExists(email: string, options?: any) {
        return UserApiFp(this.configuration).isEmailExists(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查手机号码是否存在
     * @param {string} phone 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public isPhoneExists(phone: string, options?: any) {
        return UserApiFp(this.configuration).isPhoneExists(phone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查用户名是否存在
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public isUsernameExists(username: string, options?: any) {
        return UserApiFp(this.configuration).isUsernameExists(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 用户注册（通过邮箱验证码或者手机号）
     * @param {string} username 
     * @param {string} password 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public register(username: string, password: string, code: string, options?: any) {
        return UserApiFp(this.configuration).register(username, password, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用需要 WRITE_USER_EMAIL 权限。
     * @summary 通过密码更改邮箱
     * @param {string} password 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public resetEmail(password: string, code: string, options?: any) {
        return UserApiFp(this.configuration).resetEmail(password, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用需要 WRITE_USER_PASSWORD 权限。
     * @summary 通过原密码更改用户密码
     * @param {string} oldPassword 
     * @param {string} newPassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public resetPassword(oldPassword: string, newPassword: string, options?: any) {
        return UserApiFp(this.configuration).resetPassword(oldPassword, newPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 邮箱或手机重置密码
     * @param {string} password 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public resetPassword1(password: string, code: string, options?: any) {
        return UserApiFp(this.configuration).resetPassword1(password, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用需要 WRITE_USER_PHONE 权限。
     * @summary 通过密码更改手机号码
     * @param {string} password 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public resetPhone(password: string, code: string, options?: any) {
        return UserApiFp(this.configuration).resetPhone(password, code, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 应用和用户需要 CREATE_USER 权限。
         * @summary 创建用户（用户名、邮箱、手机号码不可重复）
         * @param {string} username 
         * @param {string} password 
         * @param {string} [email] 
         * @param {string} [phone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (username: string, password: string, email?: string, phone?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('createUser', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('createUser', 'password', password)
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需要 DELETE_USER 权限。
         * @summary 删除用户（永久删除）
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (uid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('deleteUser', 'uid', uid)
            const localVarPath = `/v1/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 获取用户信息
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (uid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUser', 'uid', uid)
            const localVarPath = `/v1/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户头像
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAvatar: async (uid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUserAvatar', 'uid', uid)
            const localVarPath = `/v1/users/{uid}/avatar`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 查找用户
         * @param {Array<number>} [uid] 
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<string>} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (uid?: Array<number>, q?: string, offset?: number, limit?: number, order?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (uid) {
                localVarQueryParameter['uid'] = uid;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户头像
         * @param {number} uid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAvatar: async (uid: number, body: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserAvatar', 'uid', uid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateUserAvatar', 'body', body)
            const localVarPath = `/v1/users/{uid}/avatar`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'image/_*';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
         * @summary 更新用户邮箱
         * @param {number} uid 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEmail: async (uid: number, code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserEmail', 'uid', uid)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateUserEmail', 'code', code)
            const localVarPath = `/v1/users/{uid}/email`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户封禁或解封
         * @param {number} uid 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEnabled: async (uid: number, enabled: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserEnabled', 'uid', uid)
            // verify required parameter 'enabled' is not null or undefined
            assertParamExists('updateUserEnabled', 'enabled', enabled)
            const localVarPath = `/v1/users/{uid}/ban`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid 
         * @param {string} expiredAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserExpiredAt: async (uid: number, expiredAt: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserExpiredAt', 'uid', uid)
            // verify required parameter 'expiredAt' is not null or undefined
            assertParamExists('updateUserExpiredAt', 'expiredAt', expiredAt)
            const localVarPath = `/v1/users/{uid}/expired-at`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (expiredAt !== undefined) {
                localVarQueryParameter['expiredAt'] = (expiredAt as any instanceof Date) ?
                    (expiredAt as any).toISOString() :
                    expiredAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户性别
         * @param {number} uid 
         * @param {number} gender 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGender: async (uid: number, gender: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserGender', 'uid', uid)
            // verify required parameter 'gender' is not null or undefined
            assertParamExists('updateUserGender', 'gender', gender)
            const localVarPath = `/v1/users/{uid}/gender`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户昵称
         * @param {number} uid 
         * @param {string} nickname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserNickname: async (uid: number, nickname: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserNickname', 'uid', uid)
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('updateUserNickname', 'nickname', nickname)
            const localVarPath = `/v1/users/{uid}/nickname`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (nickname !== undefined) {
                localVarQueryParameter['nickname'] = nickname;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
         * @summary 更新用户密码
         * @param {number} uid 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword: async (uid: number, password: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserPassword', 'uid', uid)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('updateUserPassword', 'password', password)
            const localVarPath = `/v1/users/{uid}/password`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 应用和用户需拥有 WRITE_USER_PHONE 权限。
         * @summary 更新用户手机号码
         * @param {number} uid 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhone: async (uid: number, code: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserPhone', 'uid', uid)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateUserPhone', 'code', code)
            const localVarPath = `/v1/users/{uid}/phone`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid 
         * @param {string} unlockAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUnlockAt: async (uid: number, unlockAt: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('updateUserUnlockAt', 'uid', uid)
            // verify required parameter 'unlockAt' is not null or undefined
            assertParamExists('updateUserUnlockAt', 'unlockAt', unlockAt)
            const localVarPath = `/v1/users/{uid}/unlock-at`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication AccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (unlockAt !== undefined) {
                localVarQueryParameter['unlockAt'] = (unlockAt as any instanceof Date) ?
                    (unlockAt as any).toISOString() :
                    unlockAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 应用和用户需要 CREATE_USER 权限。
         * @summary 创建用户（用户名、邮箱、手机号码不可重复）
         * @param {string} username 
         * @param {string} password 
         * @param {string} [email] 
         * @param {string} [phone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(username: string, password: string, email?: string, phone?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(username, password, email, phone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需要 DELETE_USER 权限。
         * @summary 删除用户（永久删除）
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 获取用户信息
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取用户头像
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAvatar(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAvatar(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 查找用户
         * @param {Array<number>} [uid] 
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<string>} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(uid?: Array<number>, q?: string, offset?: number, limit?: number, order?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(uid, q, offset, limit, order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户头像
         * @param {number} uid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserAvatar(uid: number, body: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserAvatar(uid, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
         * @summary 更新用户邮箱
         * @param {number} uid 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserEmail(uid: number, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserEmail(uid, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户封禁或解封
         * @param {number} uid 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserEnabled(uid: number, enabled: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserEnabled(uid, enabled, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid 
         * @param {string} expiredAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserExpiredAt(uid: number, expiredAt: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserExpiredAt(uid, expiredAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户性别
         * @param {number} uid 
         * @param {number} gender 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserGender(uid: number, gender: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserGender(uid, gender, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户昵称
         * @param {number} uid 
         * @param {string} nickname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserNickname(uid: number, nickname: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserNickname(uid, nickname, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
         * @summary 更新用户密码
         * @param {number} uid 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPassword(uid: number, password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPassword(uid, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 应用和用户需拥有 WRITE_USER_PHONE 权限。
         * @summary 更新用户手机号码
         * @param {number} uid 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPhone(uid: number, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPhone(uid, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid 
         * @param {string} unlockAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserUnlockAt(uid: number, unlockAt: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserUnlockAt(uid, unlockAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 应用和用户需要 CREATE_USER 权限。
         * @summary 创建用户（用户名、邮箱、手机号码不可重复）
         * @param {string} username 
         * @param {string} password 
         * @param {string} [email] 
         * @param {string} [phone] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(username: string, password: string, email?: string, phone?: string, options?: any): AxiosPromise<User> {
            return localVarFp.createUser(username, password, email, phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 DELETE_USER 权限。
         * @summary 删除用户（永久删除）
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(uid: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUser(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 获取用户信息
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(uid: number, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户头像
         * @param {number} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAvatar(uid: number, options?: any): AxiosPromise<void> {
            return localVarFp.getUserAvatar(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 查找用户
         * @param {Array<number>} [uid] 
         * @param {string} [q] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {Array<string>} [order] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(uid?: Array<number>, q?: string, offset?: number, limit?: number, order?: Array<string>, options?: any): AxiosPromise<QueryResultsUser> {
            return localVarFp.getUsers(uid, q, offset, limit, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户头像
         * @param {number} uid 
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAvatar(uid: number, body: any, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserAvatar(uid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
         * @summary 更新用户邮箱
         * @param {number} uid 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEmail(uid: number, code: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserEmail(uid, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户封禁或解封
         * @param {number} uid 
         * @param {boolean} enabled 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEnabled(uid: number, enabled: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserEnabled(uid, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid 
         * @param {string} expiredAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserExpiredAt(uid: number, expiredAt: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserExpiredAt(uid, expiredAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户性别
         * @param {number} uid 
         * @param {number} gender 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGender(uid: number, gender: number, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserGender(uid, gender, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户昵称
         * @param {number} uid 
         * @param {string} nickname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserNickname(uid: number, nickname: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserNickname(uid, nickname, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
         * @summary 更新用户密码
         * @param {number} uid 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword(uid: number, password: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserPassword(uid, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需拥有 WRITE_USER_PHONE 权限。
         * @summary 更新用户手机号码
         * @param {number} uid 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhone(uid: number, code: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserPhone(uid, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid 
         * @param {string} unlockAt 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUnlockAt(uid: number, unlockAt: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserUnlockAt(uid, unlockAt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 应用和用户需要 CREATE_USER 权限。
     * @summary 创建用户（用户名、邮箱、手机号码不可重复）
     * @param {string} username 
     * @param {string} password 
     * @param {string} [email] 
     * @param {string} [phone] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(username: string, password: string, email?: string, phone?: string, options?: any) {
        return UsersApiFp(this.configuration).createUser(username, password, email, phone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需要 DELETE_USER 权限。
     * @summary 删除用户（永久删除）
     * @param {number} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(uid: number, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 获取用户信息
     * @param {number} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(uid: number, options?: any) {
        return UsersApiFp(this.configuration).getUser(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户头像
     * @param {number} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserAvatar(uid: number, options?: any) {
        return UsersApiFp(this.configuration).getUserAvatar(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 查找用户
     * @param {Array<number>} [uid] 
     * @param {string} [q] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {Array<string>} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(uid?: Array<number>, q?: string, offset?: number, limit?: number, order?: Array<string>, options?: any) {
        return UsersApiFp(this.configuration).getUsers(uid, q, offset, limit, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户头像
     * @param {number} uid 
     * @param {any} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserAvatar(uid: number, body: any, options?: any) {
        return UsersApiFp(this.configuration).updateUserAvatar(uid, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
     * @summary 更新用户邮箱
     * @param {number} uid 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserEmail(uid: number, code: string, options?: any) {
        return UsersApiFp(this.configuration).updateUserEmail(uid, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户封禁或解封
     * @param {number} uid 
     * @param {boolean} enabled 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserEnabled(uid: number, enabled: boolean, options?: any) {
        return UsersApiFp(this.configuration).updateUserEnabled(uid, enabled, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid 
     * @param {string} expiredAt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserExpiredAt(uid: number, expiredAt: string, options?: any) {
        return UsersApiFp(this.configuration).updateUserExpiredAt(uid, expiredAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户性别
     * @param {number} uid 
     * @param {number} gender 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserGender(uid: number, gender: number, options?: any) {
        return UsersApiFp(this.configuration).updateUserGender(uid, gender, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户昵称
     * @param {number} uid 
     * @param {string} nickname 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserNickname(uid: number, nickname: string, options?: any) {
        return UsersApiFp(this.configuration).updateUserNickname(uid, nickname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
     * @summary 更新用户密码
     * @param {number} uid 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserPassword(uid: number, password: string, options?: any) {
        return UsersApiFp(this.configuration).updateUserPassword(uid, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 应用和用户需拥有 WRITE_USER_PHONE 权限。
     * @summary 更新用户手机号码
     * @param {number} uid 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserPhone(uid: number, code: string, options?: any) {
        return UsersApiFp(this.configuration).updateUserPhone(uid, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid 
     * @param {string} unlockAt 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserUnlockAt(uid: number, unlockAt: string, options?: any) {
        return UsersApiFp(this.configuration).updateUserUnlockAt(uid, unlockAt, options).then((request) => request(this.axios, this.basePath));
    }
}


