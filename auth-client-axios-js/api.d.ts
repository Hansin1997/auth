/**
 * Auth Service
 * 提供身份管理服务以及OAuth2授权服务。身份管理服务包含用户管理、角色管理、权限管理等，OAuth2授权服务包含应用管理、应用授权模式与授权作用域管理等。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@dustlight.cn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Authority
 */
export interface Authority {
    /**
     *
     * @type {number}
     * @memberof Authority
     */
    aid?: number;
    /**
     *
     * @type {string}
     * @memberof Authority
     */
    authorityName?: string;
    /**
     *
     * @type {string}
     * @memberof Authority
     */
    authorityDescription?: string;
    /**
     *
     * @type {string}
     * @memberof Authority
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Authority
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface AuthorizationClient
 */
export interface AuthorizationClient {
    /**
     *
     * @type {string}
     * @memberof AuthorizationClient
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AuthorizationClient
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof AuthorizationClient
     */
    logo?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof AuthorizationClient
     */
    additionalInformation?: {
        [key: string]: object;
    };
    /**
     *
     * @type {string}
     * @memberof AuthorizationClient
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof AuthorizationClient
     */
    updatedAt?: string;
    /**
     *
     * @type {number}
     * @memberof AuthorizationClient
     */
    status?: number;
    /**
     *
     * @type {number}
     * @memberof AuthorizationClient
     */
    uid?: number;
    /**
     *
     * @type {Array<Resource>}
     * @memberof AuthorizationClient
     */
    resources?: Array<Resource>;
    /**
     *
     * @type {Array<string>}
     * @memberof AuthorizationClient
     */
    members?: Array<string>;
    /**
     *
     * @type {Array<AuthorizationClientScope>}
     * @memberof AuthorizationClient
     */
    scopes?: Array<AuthorizationClientScope>;
    /**
     *
     * @type {Array<GrantType>}
     * @memberof AuthorizationClient
     */
    types?: Array<GrantType>;
    /**
     *
     * @type {Array<string>}
     * @memberof AuthorizationClient
     */
    authorities?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof AuthorizationClient
     */
    clientSecret?: string;
    /**
     *
     * @type {Set<string>}
     * @memberof AuthorizationClient
     */
    registeredRedirectUri?: Set<string>;
    /**
     *
     * @type {number}
     * @memberof AuthorizationClient
     */
    refreshTokenValiditySeconds?: number;
    /**
     *
     * @type {number}
     * @memberof AuthorizationClient
     */
    accessTokenValiditySeconds?: number;
    /**
     *
     * @type {string}
     * @memberof AuthorizationClient
     */
    cid?: string;
}
/**
 *
 * @export
 * @interface AuthorizationClientScope
 */
export interface AuthorizationClientScope {
    /**
     *
     * @type {number}
     * @memberof AuthorizationClientScope
     */
    sid?: number;
    /**
     *
     * @type {string}
     * @memberof AuthorizationClientScope
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AuthorizationClientScope
     */
    subtitle?: string;
    /**
     *
     * @type {string}
     * @memberof AuthorizationClientScope
     */
    description?: string;
    /**
     *
     * @type {boolean}
     * @memberof AuthorizationClientScope
     */
    approved?: boolean;
}
/**
 *
 * @export
 * @interface AuthorizationResponse
 */
export interface AuthorizationResponse {
    /**
     *
     * @type {AuthorizationClient}
     * @memberof AuthorizationResponse
     */
    client?: AuthorizationClient;
    /**
     *
     * @type {PublicUser}
     * @memberof AuthorizationResponse
     */
    owner?: PublicUser;
    /**
     *
     * @type {string}
     * @memberof AuthorizationResponse
     */
    redirect?: string;
    /**
     *
     * @type {number}
     * @memberof AuthorizationResponse
     */
    count?: number;
    /**
     *
     * @type {boolean}
     * @memberof AuthorizationResponse
     */
    approved?: boolean;
}
/**
 *
 * @export
 * @interface Client
 */
export interface Client {
    /**
     *
     * @type {string}
     * @memberof Client
     */
    name?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Client
     */
    members?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Client
     */
    authorities?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof Client
     */
    status?: number;
    /**
     *
     * @type {number}
     * @memberof Client
     */
    uid?: number;
    /**
     *
     * @type {Array<ClientScope>}
     * @memberof Client
     */
    scopes?: Array<ClientScope>;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    updatedAt?: string;
    /**
     *
     * @type {Set<string>}
     * @memberof Client
     */
    resources?: Set<string>;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    cid?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof Client
     */
    extra?: {
        [key: string]: object;
    };
    /**
     *
     * @type {string}
     * @memberof Client
     */
    secret?: string;
    /**
     *
     * @type {Set<string>}
     * @memberof Client
     */
    redirectUri?: Set<string>;
    /**
     *
     * @type {Set<string>}
     * @memberof Client
     */
    grantTypes?: Set<string>;
    /**
     *
     * @type {number}
     * @memberof Client
     */
    refreshTokenValidity?: number;
    /**
     *
     * @type {number}
     * @memberof Client
     */
    accessTokenValidity?: number;
}
/**
 *
 * @export
 * @interface ClientScope
 */
export interface ClientScope {
    /**
     *
     * @type {boolean}
     * @memberof ClientScope
     */
    autoApprove?: boolean;
    /**
     *
     * @type {string}
     * @memberof ClientScope
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ClientScope
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof ClientScope
     */
    sid?: number;
    /**
     *
     * @type {string}
     * @memberof ClientScope
     */
    subtitle?: string;
}
/**
 *
 * @export
 * @interface GrantType
 */
export interface GrantType {
    /**
     *
     * @type {number}
     * @memberof GrantType
     */
    tid?: number;
    /**
     *
     * @type {string}
     * @memberof GrantType
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof GrantType
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof GrantType
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof GrantType
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface OAuth2AccessToken
 */
export interface OAuth2AccessToken {
    /**
     *
     * @type {string}
     * @memberof OAuth2AccessToken
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2AccessToken
     */
    expiration?: string;
    /**
     *
     * @type {Set<string>}
     * @memberof OAuth2AccessToken
     */
    scope?: Set<string>;
    /**
     *
     * @type {string}
     * @memberof OAuth2AccessToken
     */
    tokenType?: string;
    /**
     *
     * @type {boolean}
     * @memberof OAuth2AccessToken
     */
    expired?: boolean;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof OAuth2AccessToken
     */
    additionalInformation?: {
        [key: string]: object;
    };
    /**
     *
     * @type {OAuth2RefreshToken}
     * @memberof OAuth2AccessToken
     */
    refreshToken?: OAuth2RefreshToken;
    /**
     *
     * @type {number}
     * @memberof OAuth2AccessToken
     */
    expiresIn?: number;
}
/**
 *
 * @export
 * @interface OAuth2RefreshToken
 */
export interface OAuth2RefreshToken {
    /**
     *
     * @type {string}
     * @memberof OAuth2RefreshToken
     */
    value?: string;
}
/**
 *
 * @export
 * @interface PublicUser
 */
export interface PublicUser {
    /**
     *
     * @type {number}
     * @memberof PublicUser
     */
    uid?: number;
    /**
     *
     * @type {string}
     * @memberof PublicUser
     */
    avatar?: string;
    /**
     *
     * @type {string}
     * @memberof PublicUser
     */
    unlockedAt?: string;
    /**
     *
     * @type {string}
     * @memberof PublicUser
     */
    nickname?: string;
    /**
     *
     * @type {number}
     * @memberof PublicUser
     */
    gender?: number;
    /**
     *
     * @type {boolean}
     * @memberof PublicUser
     */
    enabled?: boolean;
    /**
     *
     * @type {string}
     * @memberof PublicUser
     */
    username?: string;
    /**
     *
     * @type {boolean}
     * @memberof PublicUser
     */
    accountNonLocked?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PublicUser
     */
    accountNonExpired?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PublicUser
     */
    credentialsNonExpired?: boolean;
    /**
     *
     * @type {string}
     * @memberof PublicUser
     */
    createdAt?: string;
}
/**
 *
 * @export
 * @interface QueryResultsClient
 */
export interface QueryResultsClient {
    /**
     *
     * @type {number}
     * @memberof QueryResultsClient
     */
    count?: number;
    /**
     *
     * @type {Array<Client>}
     * @memberof QueryResultsClient
     */
    data?: Array<Client>;
}
/**
 *
 * @export
 * @interface QueryResultsUser
 */
export interface QueryResultsUser {
    /**
     *
     * @type {number}
     * @memberof QueryResultsUser
     */
    count?: number;
    /**
     *
     * @type {Array<User>}
     * @memberof QueryResultsUser
     */
    data?: Array<User>;
}
/**
 *
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     *
     * @type {string}
     * @memberof Resource
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Resource
     */
    rid?: string;
    /**
     *
     * @type {string}
     * @memberof Resource
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Resource
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface Role
 */
export interface Role {
    /**
     *
     * @type {number}
     * @memberof Role
     */
    rid?: number;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    roleName?: string;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    roleDescription?: string;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface Scope
 */
export interface Scope {
    /**
     *
     * @type {number}
     * @memberof Scope
     */
    sid?: number;
    /**
     *
     * @type {string}
     * @memberof Scope
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Scope
     */
    subtitle?: string;
    /**
     *
     * @type {string}
     * @memberof Scope
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Scope
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Scope
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {Array<string>}
     * @memberof User
     */
    authorities?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof User
     */
    uid?: number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    avatar?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    unlockedAt?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    nickname?: string;
    /**
     *
     * @type {number}
     * @memberof User
     */
    gender?: number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    accountExpiredAt?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    credentialsExpiredAt?: string;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    enabled?: boolean;
    /**
     *
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    accountNonLocked?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    accountNonExpired?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    credentialsNonExpired?: boolean;
    /**
     *
     * @type {string}
     * @memberof User
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    updatedAt?: string;
    /**
     *
     * @type {Array<UserRole>}
     * @memberof User
     */
    roles?: Array<UserRole>;
}
/**
 *
 * @export
 * @interface UserRole
 */
export interface UserRole {
    /**
     *
     * @type {number}
     * @memberof UserRole
     */
    rid?: number;
    /**
     *
     * @type {string}
     * @memberof UserRole
     */
    roleName?: string;
    /**
     *
     * @type {string}
     * @memberof UserRole
     */
    roleDescription?: string;
    /**
     *
     * @type {string}
     * @memberof UserRole
     */
    expiredAt?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserRole
     */
    expired?: boolean;
}
/**
 *
 * @export
 * @interface UserRoleClient
 */
export interface UserRoleClient {
    /**
     *
     * @type {string}
     * @memberof UserRoleClient
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UserRoleClient
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof UserRoleClient
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof UserRoleClient
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof UserRoleClient
     */
    updatedAt?: string;
    /**
     *
     * @type {number}
     * @memberof UserRoleClient
     */
    status?: number;
    /**
     *
     * @type {number}
     * @memberof UserRoleClient
     */
    uid?: number;
    /**
     *
     * @type {Set<string>}
     * @memberof UserRoleClient
     */
    resources?: Set<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof UserRoleClient
     */
    members?: Array<string>;
    /**
     *
     * @type {Array<ClientScope>}
     * @memberof UserRoleClient
     */
    scopes?: Array<ClientScope>;
    /**
     *
     * @type {Array<GrantType>}
     * @memberof UserRoleClient
     */
    types?: Array<GrantType>;
    /**
     *
     * @type {Array<string>}
     * @memberof UserRoleClient
     */
    authorities?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof UserRoleClient
     */
    count?: number;
    /**
     *
     * @type {string}
     * @memberof UserRoleClient
     */
    clientSecret?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof UserRoleClient
     */
    extra?: {
        [key: string]: object;
    };
    /**
     *
     * @type {string}
     * @memberof UserRoleClient
     */
    cid?: string;
    /**
     *
     * @type {Set<string>}
     * @memberof UserRoleClient
     */
    redirectUri?: Set<string>;
    /**
     *
     * @type {Set<string>}
     * @memberof UserRoleClient
     */
    grantTypes?: Set<string>;
    /**
     *
     * @type {number}
     * @memberof UserRoleClient
     */
    refreshTokenValidity?: number;
    /**
     *
     * @type {number}
     * @memberof UserRoleClient
     */
    accessTokenValidity?: number;
}
/**
 * AuthoritiesApi - axios parameter creator
 * @export
 */
export declare const AuthoritiesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 删除权限
     * @param {Array<number>} requestBody
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuthorities: (requestBody: Array<number>, clientId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 删除应用权限
     * @param {string} cid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClientAuthorities: (cid: string, authorityId: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 删除角色权限
     * @param {number} rid
     * @param {Array<number>} authorityId
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleAuthorities: (rid: number, authorityId: Array<number>, clientId?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 获取权限
     * @param {Array<number>} [id]
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorities: (id?: Array<number>, clientId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientAuthorities: (cid: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 获取角色权限
     * @param {number} rid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAuthorities: (rid: number, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientAuthorities: (uid: number, cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 修改或添加权限
     * @param {Array<Authority>} authority
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAuthorities: (authority: Array<Authority>, clientId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 添加应用权限
     * @param {string} cid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setClientAuthorities: (cid: string, authorityId: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 添加角色权限
     * @param {number} rid
     * @param {Array<number>} authorityId
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setRoleAuthorities: (rid: number, authorityId: Array<number>, clientId?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * AuthoritiesApi - functional programming interface
 * @export
 */
export declare const AuthoritiesApiFp: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 删除权限
     * @param {Array<number>} requestBody
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuthorities(requestBody: Array<number>, clientId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 删除应用权限
     * @param {string} cid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClientAuthorities(cid: string, authorityId: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 删除角色权限
     * @param {number} rid
     * @param {Array<number>} authorityId
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleAuthorities(rid: number, authorityId: Array<number>, clientId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary 获取权限
     * @param {Array<number>} [id]
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorities(id?: Array<number>, clientId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Authority>>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientAuthorities(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     *
     * @summary 获取角色权限
     * @param {number} rid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAuthorities(rid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientAuthorities(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 修改或添加权限
     * @param {Array<Authority>} authority
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAuthorities(authority: Array<Authority>, clientId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Authority>>>;
    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 添加应用权限
     * @param {string} cid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setClientAuthorities(cid: string, authorityId: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 添加角色权限
     * @param {number} rid
     * @param {Array<number>} authorityId
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setRoleAuthorities(rid: number, authorityId: Array<number>, clientId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AuthoritiesApi - factory interface
 * @export
 */
export declare const AuthoritiesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 删除权限
     * @param {Array<number>} requestBody
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAuthorities(requestBody: Array<number>, clientId?: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 删除应用权限
     * @param {string} cid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClientAuthorities(cid: string, authorityId: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 删除角色权限
     * @param {number} rid
     * @param {Array<number>} authorityId
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleAuthorities(rid: number, authorityId: Array<number>, clientId?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 获取权限
     * @param {Array<number>} [id]
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorities(id?: Array<number>, clientId?: string, options?: any): AxiosPromise<Array<Authority>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientAuthorities(cid: string, options?: any): AxiosPromise<Array<string>>;
    /**
     *
     * @summary 获取角色权限
     * @param {number} rid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAuthorities(rid: number, options?: any): AxiosPromise<Array<string>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientAuthorities(uid: number, cid: string, options?: any): AxiosPromise<Array<string>>;
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 修改或添加权限
     * @param {Array<Authority>} authority
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAuthorities(authority: Array<Authority>, clientId?: string, options?: any): AxiosPromise<Array<Authority>>;
    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 添加应用权限
     * @param {string} cid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setClientAuthorities(cid: string, authorityId: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 添加角色权限
     * @param {number} rid
     * @param {Array<number>} authorityId
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setRoleAuthorities(rid: number, authorityId: Array<number>, clientId?: string, options?: any): AxiosPromise<void>;
};
/**
 * AuthoritiesApi - object-oriented interface
 * @export
 * @class AuthoritiesApi
 * @extends {BaseAPI}
 */
export declare class AuthoritiesApi extends BaseAPI {
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 删除权限
     * @param {Array<number>} requestBody
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    deleteAuthorities(requestBody: Array<number>, clientId?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 删除应用权限
     * @param {string} cid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    deleteClientAuthorities(cid: string, authorityId: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 删除角色权限
     * @param {number} rid
     * @param {Array<number>} authorityId
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    deleteRoleAuthorities(rid: number, authorityId: Array<number>, clientId?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary 获取权限
     * @param {Array<number>} [id]
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    getAuthorities(id?: Array<number>, clientId?: string, options?: any): Promise<import("axios").AxiosResponse<Authority[]>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    getClientAuthorities(cid: string, options?: any): Promise<import("axios").AxiosResponse<string[]>>;
    /**
     *
     * @summary 获取角色权限
     * @param {number} rid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    getRoleAuthorities(rid: number, options?: any): Promise<import("axios").AxiosResponse<string[]>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    getUserClientAuthorities(uid: number, cid: string, options?: any): Promise<import("axios").AxiosResponse<string[]>>;
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 修改或添加权限
     * @param {Array<Authority>} authority
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    setAuthorities(authority: Array<Authority>, clientId?: string, options?: any): Promise<import("axios").AxiosResponse<Authority[]>>;
    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 添加应用权限
     * @param {string} cid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    setClientAuthorities(cid: string, authorityId: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 添加角色权限
     * @param {number} rid
     * @param {Array<number>} authorityId
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    setRoleAuthorities(rid: number, authorityId: Array<number>, clientId?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export declare const AuthorizationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 应用需要 AUTHORIZE 权限。
     * @summary 应用授权
     * @param {boolean} approved
     * @param {Set<string>} [scope]
     * @param {boolean} [jwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthorization: (approved: boolean, scope?: Set<string>, jwt?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
     * @summary 获取应用授权
     * @param {string} clientId
     * @param {string} [responseType]
     * @param {string} [redirectUri]
     * @param {Array<string>} [scope]
     * @param {string} [state]
     * @param {boolean} [jwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorization: (clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, jwt?: boolean, options?: any) => Promise<RequestArgs>;
};
/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export declare const AuthorizationApiFp: (configuration?: Configuration) => {
    /**
     * 应用需要 AUTHORIZE 权限。
     * @summary 应用授权
     * @param {boolean} approved
     * @param {Set<string>} [scope]
     * @param {boolean} [jwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthorization(approved: boolean, scope?: Set<string>, jwt?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationResponse>>;
    /**
     * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
     * @summary 获取应用授权
     * @param {string} clientId
     * @param {string} [responseType]
     * @param {string} [redirectUri]
     * @param {Array<string>} [scope]
     * @param {string} [state]
     * @param {boolean} [jwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorization(clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, jwt?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationResponse>>;
};
/**
 * AuthorizationApi - factory interface
 * @export
 */
export declare const AuthorizationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 应用需要 AUTHORIZE 权限。
     * @summary 应用授权
     * @param {boolean} approved
     * @param {Set<string>} [scope]
     * @param {boolean} [jwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuthorization(approved: boolean, scope?: Set<string>, jwt?: boolean, options?: any): AxiosPromise<AuthorizationResponse>;
    /**
     * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
     * @summary 获取应用授权
     * @param {string} clientId
     * @param {string} [responseType]
     * @param {string} [redirectUri]
     * @param {Array<string>} [scope]
     * @param {string} [state]
     * @param {boolean} [jwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthorization(clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, jwt?: boolean, options?: any): AxiosPromise<AuthorizationResponse>;
};
/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export declare class AuthorizationApi extends BaseAPI {
    /**
     * 应用需要 AUTHORIZE 权限。
     * @summary 应用授权
     * @param {boolean} approved
     * @param {Set<string>} [scope]
     * @param {boolean} [jwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    createAuthorization(approved: boolean, scope?: Set<string>, jwt?: boolean, options?: any): Promise<import("axios").AxiosResponse<AuthorizationResponse>>;
    /**
     * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
     * @summary 获取应用授权
     * @param {string} clientId
     * @param {string} [responseType]
     * @param {string} [redirectUri]
     * @param {Array<string>} [scope]
     * @param {string} [state]
     * @param {boolean} [jwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    getAuthorization(clientId: string, responseType?: string, redirectUri?: string, scope?: Array<string>, state?: string, jwt?: boolean, options?: any): Promise<import("axios").AxiosResponse<AuthorizationResponse>>;
}
/**
 * ClientsApi - axios parameter creator
 * @export
 */
export declare const ClientsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用成员
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addClientMembers: (cid: string, uids: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用成员
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserClientMembers: (uid: number, cid: string, uids: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 创建应用
     * @param {number} uid
     * @param {string} name
     * @param {string} description
     * @param {string} redirectUri
     * @param {Array<number>} [scopes]
     * @param {Array<number>} [grantTypes]
     * @param {number} [accessTokenValidity]
     * @param {number} [refreshTokenValidity]
     * @param {string} [additionalInformation]
     * @param {number} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient: (uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
     * @summary 创建用户应用
     * @param {number} uid
     * @param {string} name
     * @param {string} description
     * @param {string} redirectUri
     * @param {Array<number>} [scopes]
     * @param {Array<number>} [grantTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserClient: (uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient: (cid: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 获取应用 Logo
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientLogo: (cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 查询应用
     * @param {string} [q]
     * @param {Array<string>} [order]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients: (q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClient: (uid: number, cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用 Logo
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientLogo: (uid: number, cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 查询用户应用
     * @param {number} uid
     * @param {string} [q]
     * @param {Array<string>} [order]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClients: (uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClient: (cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 移除应用成员
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClientMembers: (cid: string, uids: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {Array<string>} cids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClients: (cids: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClient: (uid: number, cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 移除应用成员
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClientMembers: (uid: number, cid: string, uids: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid
     * @param {Array<string>} cids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClients: (uid: number, cids: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用AccessToken有效期
     * @param {string} cid
     * @param {number} accessTokenValidity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientAccessTokenValidity: (cid: string, accessTokenValidity: number, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用描述
     * @param {string} cid
     * @param {string} description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientDescription: (cid: string, description: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用 Logo
     * @param {string} cid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientLogo: (cid: string, body: any, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用名称
     * @param {string} cid
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientName: (cid: string, name: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用回调地址
     * @param {string} cid
     * @param {string} redirectUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientRedirectUri: (cid: string, redirectUri: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用RefreshToken有效期
     * @param {string} cid
     * @param {number} refreshTokenValidity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientRefreshTokenValidity: (cid: string, refreshTokenValidity: number, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用密钥
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientSecret: (cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用状态
     * @param {string} cid
     * @param {number} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientStatus: (cid: string, status: number, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用描述
     * @param {number} uid
     * @param {string} cid
     * @param {string} description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientDescription: (uid: number, cid: string, description: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用 Logo
     * @param {number} uid
     * @param {string} cid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientLogo: (uid: number, cid: string, body: any, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用名称
     * @param {number} uid
     * @param {string} cid
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientName: (uid: number, cid: string, name: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用回调地址
     * @param {number} uid
     * @param {string} cid
     * @param {string} redirectUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientRedirectUri: (uid: number, cid: string, redirectUri: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用密钥
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientSecret: (uid: number, cid: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ClientsApi - functional programming interface
 * @export
 */
export declare const ClientsApiFp: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用成员
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addClientMembers(cid: string, uids: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用成员
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 创建应用
     * @param {number} uid
     * @param {string} name
     * @param {string} description
     * @param {string} redirectUri
     * @param {Array<number>} [scopes]
     * @param {Array<number>} [grantTypes]
     * @param {number} [accessTokenValidity]
     * @param {number} [refreshTokenValidity]
     * @param {string} [additionalInformation]
     * @param {number} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
     * @summary 创建用户应用
     * @param {number} uid
     * @param {string} name
     * @param {string} description
     * @param {string} redirectUri
     * @param {Array<number>} [scopes]
     * @param {Array<number>} [grantTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>>;
    /**
     *
     * @summary 获取应用 Logo
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientLogo(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 查询应用
     * @param {string} [q]
     * @param {Array<string>} [order]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients(q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultsClient>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClient(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用 Logo
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientLogo(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 查询用户应用
     * @param {number} uid
     * @param {string} [q]
     * @param {Array<string>} [order]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClients(uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultsClient>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClient(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 移除应用成员
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClientMembers(cid: string, uids: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {Array<string>} cids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClients(cids: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClient(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 移除应用成员
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid
     * @param {Array<string>} cids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClients(uid: number, cids: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用AccessToken有效期
     * @param {string} cid
     * @param {number} accessTokenValidity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientAccessTokenValidity(cid: string, accessTokenValidity: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用描述
     * @param {string} cid
     * @param {string} description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientDescription(cid: string, description: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用 Logo
     * @param {string} cid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientLogo(cid: string, body: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用名称
     * @param {string} cid
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientName(cid: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用回调地址
     * @param {string} cid
     * @param {string} redirectUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientRedirectUri(cid: string, redirectUri: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用RefreshToken有效期
     * @param {string} cid
     * @param {number} refreshTokenValidity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientRefreshTokenValidity(cid: string, refreshTokenValidity: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用密钥
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientSecret(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用状态
     * @param {string} cid
     * @param {number} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientStatus(cid: string, status: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用描述
     * @param {number} uid
     * @param {string} cid
     * @param {string} description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientDescription(uid: number, cid: string, description: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用 Logo
     * @param {number} uid
     * @param {string} cid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientLogo(uid: number, cid: string, body: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用名称
     * @param {number} uid
     * @param {string} cid
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientName(uid: number, cid: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用回调地址
     * @param {number} uid
     * @param {string} cid
     * @param {string} redirectUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientRedirectUri(uid: number, cid: string, redirectUri: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用密钥
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientSecret(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * ClientsApi - factory interface
 * @export
 */
export declare const ClientsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用成员
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addClientMembers(cid: string, uids: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用成员
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 创建应用
     * @param {number} uid
     * @param {string} name
     * @param {string} description
     * @param {string} redirectUri
     * @param {Array<number>} [scopes]
     * @param {Array<number>} [grantTypes]
     * @param {number} [accessTokenValidity]
     * @param {number} [refreshTokenValidity]
     * @param {string} [additionalInformation]
     * @param {number} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options?: any): AxiosPromise<Client>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
     * @summary 创建用户应用
     * @param {number} uid
     * @param {string} name
     * @param {string} description
     * @param {string} redirectUri
     * @param {Array<number>} [scopes]
     * @param {Array<number>} [grantTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, options?: any): AxiosPromise<Client>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient(cid: string, options?: any): AxiosPromise<Client>;
    /**
     *
     * @summary 获取应用 Logo
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientLogo(cid: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 查询应用
     * @param {string} [q]
     * @param {Array<string>} [order]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients(q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): AxiosPromise<QueryResultsClient>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClient(uid: number, cid: string, options?: any): AxiosPromise<Client>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用 Logo
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientLogo(uid: number, cid: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 查询用户应用
     * @param {number} uid
     * @param {string} [q]
     * @param {Array<string>} [order]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClients(uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): AxiosPromise<QueryResultsClient>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClient(cid: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 移除应用成员
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClientMembers(cid: string, uids: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {Array<string>} cids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClients(cids: Array<string>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClient(uid: number, cid: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 移除应用成员
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid
     * @param {Array<string>} cids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClients(uid: number, cids: Array<string>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用AccessToken有效期
     * @param {string} cid
     * @param {number} accessTokenValidity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientAccessTokenValidity(cid: string, accessTokenValidity: number, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用描述
     * @param {string} cid
     * @param {string} description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientDescription(cid: string, description: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用 Logo
     * @param {string} cid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientLogo(cid: string, body: any, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用名称
     * @param {string} cid
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientName(cid: string, name: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用回调地址
     * @param {string} cid
     * @param {string} redirectUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientRedirectUri(cid: string, redirectUri: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用RefreshToken有效期
     * @param {string} cid
     * @param {number} refreshTokenValidity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientRefreshTokenValidity(cid: string, refreshTokenValidity: number, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用密钥
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientSecret(cid: string, options?: any): AxiosPromise<string>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用状态
     * @param {string} cid
     * @param {number} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateClientStatus(cid: string, status: number, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用描述
     * @param {number} uid
     * @param {string} cid
     * @param {string} description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientDescription(uid: number, cid: string, description: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用 Logo
     * @param {number} uid
     * @param {string} cid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientLogo(uid: number, cid: string, body: any, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用名称
     * @param {number} uid
     * @param {string} cid
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientName(uid: number, cid: string, name: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用回调地址
     * @param {number} uid
     * @param {string} cid
     * @param {string} redirectUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientRedirectUri(uid: number, cid: string, redirectUri: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用密钥
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserClientSecret(uid: number, cid: string, options?: any): AxiosPromise<string>;
};
/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export declare class ClientsApi extends BaseAPI {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用成员
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    addClientMembers(cid: string, uids: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用成员
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    addUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 创建应用
     * @param {number} uid
     * @param {string} name
     * @param {string} description
     * @param {string} redirectUri
     * @param {Array<number>} [scopes]
     * @param {Array<number>} [grantTypes]
     * @param {number} [accessTokenValidity]
     * @param {number} [refreshTokenValidity]
     * @param {string} [additionalInformation]
     * @param {number} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    createClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, accessTokenValidity?: number, refreshTokenValidity?: number, additionalInformation?: string, status?: number, options?: any): Promise<import("axios").AxiosResponse<Client>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
     * @summary 创建用户应用
     * @param {number} uid
     * @param {string} name
     * @param {string} description
     * @param {string} redirectUri
     * @param {Array<number>} [scopes]
     * @param {Array<number>} [grantTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    createUserClient(uid: number, name: string, description: string, redirectUri: string, scopes?: Array<number>, grantTypes?: Array<number>, options?: any): Promise<import("axios").AxiosResponse<Client>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getClient(cid: string, options?: any): Promise<import("axios").AxiosResponse<Client>>;
    /**
     *
     * @summary 获取应用 Logo
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getClientLogo(cid: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 查询应用
     * @param {string} [q]
     * @param {Array<string>} [order]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getClients(q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<QueryResultsClient>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getUserClient(uid: number, cid: string, options?: any): Promise<import("axios").AxiosResponse<Client>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用 Logo
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getUserClientLogo(uid: number, cid: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 查询用户应用
     * @param {number} uid
     * @param {string} [q]
     * @param {Array<string>} [order]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getUserClients(uid: number, q?: string, order?: Array<string>, offset?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<QueryResultsClient>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    removeClient(cid: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 移除应用成员
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    removeClientMembers(cid: string, uids: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {Array<string>} cids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    removeClients(cids: Array<string>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    removeUserClient(uid: number, cid: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 移除应用成员
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} uids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    removeUserClientMembers(uid: number, cid: string, uids: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid
     * @param {Array<string>} cids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    removeUserClients(uid: number, cids: Array<string>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用AccessToken有效期
     * @param {string} cid
     * @param {number} accessTokenValidity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientAccessTokenValidity(cid: string, accessTokenValidity: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用描述
     * @param {string} cid
     * @param {string} description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientDescription(cid: string, description: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用 Logo
     * @param {string} cid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientLogo(cid: string, body: any, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用名称
     * @param {string} cid
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientName(cid: string, name: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用回调地址
     * @param {string} cid
     * @param {string} redirectUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientRedirectUri(cid: string, redirectUri: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用RefreshToken有效期
     * @param {string} cid
     * @param {number} refreshTokenValidity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientRefreshTokenValidity(cid: string, refreshTokenValidity: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用密钥
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientSecret(cid: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用状态
     * @param {string} cid
     * @param {number} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientStatus(cid: string, status: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用描述
     * @param {number} uid
     * @param {string} cid
     * @param {string} description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateUserClientDescription(uid: number, cid: string, description: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用 Logo
     * @param {number} uid
     * @param {string} cid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateUserClientLogo(uid: number, cid: string, body: any, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用名称
     * @param {number} uid
     * @param {string} cid
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateUserClientName(uid: number, cid: string, name: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用回调地址
     * @param {number} uid
     * @param {string} cid
     * @param {string} redirectUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateUserClientRedirectUri(uid: number, cid: string, redirectUri: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用密钥
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateUserClientSecret(uid: number, cid: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
}
/**
 * CodeApi - axios parameter creator
 * @export
 */
export declare const CodeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistrationCode: (gRecaptchaResponse: string, email: string, options?: any) => Promise<RequestArgs>;
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistrationEmailCode: (gRecaptchaResponse: string, email: string, options?: any) => Promise<RequestArgs>;
    /**
     * 发送验证码到手机，用于注册。
     * @summary 获取注册手机验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistrationPhoneCode: (gRecaptchaResponse: string, phone: string, options?: any) => Promise<RequestArgs>;
    /**
     * 发送验证码到邮箱，用于更改邮箱。
     * @summary 获取更换邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdateEmailCode: (gRecaptchaResponse: string, email: string, options?: any) => Promise<RequestArgs>;
    /**
     * 发送验证码到邮箱，用于更改密码。
     * @summary 获取重置密码邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdatePasswordEmailCode: (gRecaptchaResponse: string, email: string, options?: any) => Promise<RequestArgs>;
    /**
     * 发送验证码到手机，用于更改密码。
     * @summary 获取重置密码手机验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdatePasswordPhoneCode: (gRecaptchaResponse: string, phone: string, options?: any) => Promise<RequestArgs>;
    /**
     * 发送验证码到手机，用于更改手机号码。
     * @summary 获取更换手机号码验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdatePhoneCode: (gRecaptchaResponse: string, phone: string, options?: any) => Promise<RequestArgs>;
};
/**
 * CodeApi - functional programming interface
 * @export
 */
export declare const CodeApiFp: (configuration?: Configuration) => {
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistrationCode(gRecaptchaResponse: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistrationEmailCode(gRecaptchaResponse: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 发送验证码到手机，用于注册。
     * @summary 获取注册手机验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistrationPhoneCode(gRecaptchaResponse: string, phone: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 发送验证码到邮箱，用于更改邮箱。
     * @summary 获取更换邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdateEmailCode(gRecaptchaResponse: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 发送验证码到邮箱，用于更改密码。
     * @summary 获取重置密码邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdatePasswordEmailCode(gRecaptchaResponse: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 发送验证码到手机，用于更改密码。
     * @summary 获取重置密码手机验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdatePasswordPhoneCode(gRecaptchaResponse: string, phone: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 发送验证码到手机，用于更改手机号码。
     * @summary 获取更换手机号码验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdatePhoneCode(gRecaptchaResponse: string, phone: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * CodeApi - factory interface
 * @export
 */
export declare const CodeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistrationCode(gRecaptchaResponse: string, email: string, options?: any): AxiosPromise<void>;
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistrationEmailCode(gRecaptchaResponse: string, email: string, options?: any): AxiosPromise<void>;
    /**
     * 发送验证码到手机，用于注册。
     * @summary 获取注册手机验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistrationPhoneCode(gRecaptchaResponse: string, phone: string, options?: any): AxiosPromise<void>;
    /**
     * 发送验证码到邮箱，用于更改邮箱。
     * @summary 获取更换邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdateEmailCode(gRecaptchaResponse: string, email: string, options?: any): AxiosPromise<void>;
    /**
     * 发送验证码到邮箱，用于更改密码。
     * @summary 获取重置密码邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdatePasswordEmailCode(gRecaptchaResponse: string, email: string, options?: any): AxiosPromise<void>;
    /**
     * 发送验证码到手机，用于更改密码。
     * @summary 获取重置密码手机验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdatePasswordPhoneCode(gRecaptchaResponse: string, phone: string, options?: any): AxiosPromise<void>;
    /**
     * 发送验证码到手机，用于更改手机号码。
     * @summary 获取更换手机号码验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUpdatePhoneCode(gRecaptchaResponse: string, phone: string, options?: any): AxiosPromise<void>;
};
/**
 * CodeApi - object-oriented interface
 * @export
 * @class CodeApi
 * @extends {BaseAPI}
 */
export declare class CodeApi extends BaseAPI {
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createRegistrationCode(gRecaptchaResponse: string, email: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createRegistrationEmailCode(gRecaptchaResponse: string, email: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 发送验证码到手机，用于注册。
     * @summary 获取注册手机验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createRegistrationPhoneCode(gRecaptchaResponse: string, phone: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 发送验证码到邮箱，用于更改邮箱。
     * @summary 获取更换邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createUpdateEmailCode(gRecaptchaResponse: string, email: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 发送验证码到邮箱，用于更改密码。
     * @summary 获取重置密码邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createUpdatePasswordEmailCode(gRecaptchaResponse: string, email: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 发送验证码到手机，用于更改密码。
     * @summary 获取重置密码手机验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createUpdatePasswordPhoneCode(gRecaptchaResponse: string, phone: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 发送验证码到手机，用于更改手机号码。
     * @summary 获取更换手机号码验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createUpdatePhoneCode(gRecaptchaResponse: string, phone: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * GrantTypesApi - axios parameter creator
 * @export
 */
export declare const GrantTypesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addClientGrantTypes: (cid: string, tid: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserClientGrantTypes: (uid: number, cid: string, tid: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClientGrantTypes: (cid: string, tid: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 删除授权模式
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGrantTypes: (tid: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserClientGrantTypes: (uid: number, cid: string, tid: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientGrantTypes: (cid: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 获取授权模式
     * @param {Array<number>} [tid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGrantTypes: (tid?: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientGrantTypes: (uid: number, cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 添加或修改授权模式
     * @param {Array<GrantType>} grantType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setGrantTypes: (grantType: Array<GrantType>, options?: any) => Promise<RequestArgs>;
};
/**
 * GrantTypesApi - functional programming interface
 * @export
 */
export declare const GrantTypesApiFp: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addClientGrantTypes(cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClientGrantTypes(cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 删除授权模式
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGrantTypes(tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientGrantTypes(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GrantType>>>;
    /**
     *
     * @summary 获取授权模式
     * @param {Array<number>} [tid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGrantTypes(tid?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GrantType>>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientGrantTypes(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GrantType>>>;
    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 添加或修改授权模式
     * @param {Array<GrantType>} grantType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setGrantTypes(grantType: Array<GrantType>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * GrantTypesApi - factory interface
 * @export
 */
export declare const GrantTypesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addClientGrantTypes(cid: string, tid: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClientGrantTypes(cid: string, tid: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 删除授权模式
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGrantTypes(tid: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientGrantTypes(cid: string, options?: any): AxiosPromise<Array<GrantType>>;
    /**
     *
     * @summary 获取授权模式
     * @param {Array<number>} [tid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGrantTypes(tid?: Array<number>, options?: any): AxiosPromise<Array<GrantType>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientGrantTypes(uid: number, cid: string, options?: any): AxiosPromise<Array<GrantType>>;
    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 添加或修改授权模式
     * @param {Array<GrantType>} grantType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setGrantTypes(grantType: Array<GrantType>, options?: any): AxiosPromise<void>;
};
/**
 * GrantTypesApi - object-oriented interface
 * @export
 * @class GrantTypesApi
 * @extends {BaseAPI}
 */
export declare class GrantTypesApi extends BaseAPI {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    addClientGrantTypes(cid: string, tid: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    addUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    deleteClientGrantTypes(cid: string, tid: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 删除授权模式
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    deleteGrantTypes(tid: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    deleteUserClientGrantTypes(uid: number, cid: string, tid: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    getClientGrantTypes(cid: string, options?: any): Promise<import("axios").AxiosResponse<GrantType[]>>;
    /**
     *
     * @summary 获取授权模式
     * @param {Array<number>} [tid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    getGrantTypes(tid?: Array<number>, options?: any): Promise<import("axios").AxiosResponse<GrantType[]>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    getUserClientGrantTypes(uid: number, cid: string, options?: any): Promise<import("axios").AxiosResponse<GrantType[]>>;
    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 添加或修改授权模式
     * @param {Array<GrantType>} grantType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    setGrantTypes(grantType: Array<GrantType>, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * RolesApi - axios parameter creator
 * @export
 */
export declare const RolesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 删除角色
     * @param {Array<number>} id
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoles: (id: Array<number>, clientId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserClientRoles: (uid: number, cid: string, id: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserRoles: (uid: number, id: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 获取角色
     * @param {Array<number>} [id]
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles: (id?: Array<number>, clientId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientRoles: (uid: number, cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用需要 READ_USER 权限。
     * @summary 获取用户的角色应用
     * @param {number} uid
     * @param {boolean} [managed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoleClients: (uid: number, managed?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoles: (uid: number, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 修改或添加角色
     * @param {Array<Role>} role
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setRoles: (role: Array<Role>, clientId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid
     * @param {string} cid
     * @param {Array<UserRole>} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserClientRoles: (uid: number, cid: string, userRole: Array<UserRole>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid
     * @param {Array<UserRole>} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserRoles: (uid: number, userRole: Array<UserRole>, options?: any) => Promise<RequestArgs>;
};
/**
 * RolesApi - functional programming interface
 * @export
 */
export declare const RolesApiFp: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 删除角色
     * @param {Array<number>} id
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoles(id: Array<number>, clientId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserClientRoles(uid: number, cid: string, id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserRoles(uid: number, id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary 获取角色
     * @param {Array<number>} [id]
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles(id?: Array<number>, clientId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>>;
    /**
     * 应用需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientRoles(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>>;
    /**
     * 应用需要 READ_USER 权限。
     * @summary 获取用户的角色应用
     * @param {number} uid
     * @param {boolean} [managed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoleClients(uid: number, managed?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserRoleClient>>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoles(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>>;
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 修改或添加角色
     * @param {Array<Role>} role
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setRoles(role: Array<Role>, clientId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid
     * @param {string} cid
     * @param {Array<UserRole>} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserClientRoles(uid: number, cid: string, userRole: Array<UserRole>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid
     * @param {Array<UserRole>} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserRoles(uid: number, userRole: Array<UserRole>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * RolesApi - factory interface
 * @export
 */
export declare const RolesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 删除角色
     * @param {Array<number>} id
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoles(id: Array<number>, clientId?: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserClientRoles(uid: number, cid: string, id: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserRoles(uid: number, id: Array<number>, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 获取角色
     * @param {Array<number>} [id]
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoles(id?: Array<number>, clientId?: string, options?: any): AxiosPromise<Array<Role>>;
    /**
     * 应用需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientRoles(uid: number, cid: string, options?: any): AxiosPromise<Array<Role>>;
    /**
     * 应用需要 READ_USER 权限。
     * @summary 获取用户的角色应用
     * @param {number} uid
     * @param {boolean} [managed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoleClients(uid: number, managed?: boolean, options?: any): AxiosPromise<Array<UserRoleClient>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoles(uid: number, options?: any): AxiosPromise<Array<Role>>;
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 修改或添加角色
     * @param {Array<Role>} role
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setRoles(role: Array<Role>, clientId?: string, options?: any): AxiosPromise<Array<Role>>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid
     * @param {string} cid
     * @param {Array<UserRole>} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserClientRoles(uid: number, cid: string, userRole: Array<UserRole>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid
     * @param {Array<UserRole>} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserRoles(uid: number, userRole: Array<UserRole>, options?: any): AxiosPromise<void>;
};
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export declare class RolesApi extends BaseAPI {
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 删除角色
     * @param {Array<number>} id
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteRoles(id: Array<number>, clientId?: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteUserClientRoles(uid: number, cid: string, id: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteUserRoles(uid: number, id: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary 获取角色
     * @param {Array<number>} [id]
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRoles(id?: Array<number>, clientId?: string, options?: any): Promise<import("axios").AxiosResponse<Role[]>>;
    /**
     * 应用需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getUserClientRoles(uid: number, cid: string, options?: any): Promise<import("axios").AxiosResponse<Role[]>>;
    /**
     * 应用需要 READ_USER 权限。
     * @summary 获取用户的角色应用
     * @param {number} uid
     * @param {boolean} [managed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getUserRoleClients(uid: number, managed?: boolean, options?: any): Promise<import("axios").AxiosResponse<UserRoleClient[]>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getUserRoles(uid: number, options?: any): Promise<import("axios").AxiosResponse<Role[]>>;
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 修改或添加角色
     * @param {Array<Role>} role
     * @param {string} [clientId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    setRoles(role: Array<Role>, clientId?: string, options?: any): Promise<import("axios").AxiosResponse<Role[]>>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid
     * @param {string} cid
     * @param {Array<UserRole>} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    setUserClientRoles(uid: number, cid: string, userRole: Array<UserRole>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid
     * @param {Array<UserRole>} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    setUserRoles(uid: number, userRole: Array<UserRole>, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * ScopesApi - axios parameter creator
 * @export
 */
export declare const ScopesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addClientScopes: (cid: string, sid: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserClientScopes: (uid: number, cid: string, sid: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 删除授权作用域
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScopes: (id: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientScopes: (cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取授权作用域
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScopes: (id?: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientScopes: (uid: number, cid: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClientScopes: (cid: string, sid: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClientScopes: (uid: number, cid: string, sid: Array<number>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 修改或添加授权作用域
     * @param {Array<Scope>} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setScopes: (scope: Array<Scope>, options?: any) => Promise<RequestArgs>;
};
/**
 * ScopesApi - functional programming interface
 * @export
 */
export declare const ScopesApiFp: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addClientScopes(cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 删除授权作用域
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScopes(id: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientScopes(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取授权作用域
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScopes(id?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientScopes(uid: number, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scope>>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClientScopes(cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 修改或添加授权作用域
     * @param {Array<Scope>} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setScopes(scope: Array<Scope>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ScopesApi - factory interface
 * @export
 */
export declare const ScopesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addClientScopes(cid: string, sid: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 删除授权作用域
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScopes(id: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientScopes(cid: string, options?: any): AxiosPromise<Array<Scope>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取授权作用域
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScopes(id?: Array<number>, options?: any): AxiosPromise<Array<Scope>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserClientScopes(uid: number, cid: string, options?: any): AxiosPromise<Array<Scope>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeClientScopes(cid: string, sid: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 修改或添加授权作用域
     * @param {Array<Scope>} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setScopes(scope: Array<Scope>, options?: any): AxiosPromise<void>;
};
/**
 * ScopesApi - object-oriented interface
 * @export
 * @class ScopesApi
 * @extends {BaseAPI}
 */
export declare class ScopesApi extends BaseAPI {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    addClientScopes(cid: string, sid: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    addUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 删除授权作用域
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    deleteScopes(id: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    getClientScopes(cid: string, options?: any): Promise<import("axios").AxiosResponse<Scope[]>>;
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取授权作用域
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    getScopes(id?: Array<number>, options?: any): Promise<import("axios").AxiosResponse<Scope[]>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    getUserClientScopes(uid: number, cid: string, options?: any): Promise<import("axios").AxiosResponse<Scope[]>>;
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    removeClientScopes(cid: string, sid: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    removeUserClientScopes(uid: number, cid: string, sid: Array<number>, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 修改或添加授权作用域
     * @param {Array<Scope>} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    setScopes(scope: Array<Scope>, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * TokenApi - axios parameter creator
 * @export
 */
export declare const TokenApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary 检查令牌有效性
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkOAuthToken: (token: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 检查令牌有效性
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkOAuthTokenPost: (token?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 删除令牌
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToken: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 获取 JWT 公钥（JWK）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJwk: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 获取签名 JWT（JWS）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJws: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 颁发签名 JWT（JWS）
     * @param {string} [code]
     * @param {string} [grantType]
     * @param {string} [redirectUri]
     * @param {string} [username]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantJws: (code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 颁发 OAuth2 令牌
     * @param {string} [code]
     * @param {string} [grantType]
     * @param {string} [redirectUri]
     * @param {string} [username]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantOAuthToken: (code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 颁发默认令牌
     * @param {string} username
     * @param {string} password
     * @param {string} gRecaptchaResponse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantToken: (username: string, password: string, gRecaptchaResponse: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TokenApi - functional programming interface
 * @export
 */
export declare const TokenApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary 检查令牌有效性
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkOAuthToken(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary 检查令牌有效性
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkOAuthTokenPost(token?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary 删除令牌
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToken(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary 获取 JWT 公钥（JWK）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJwk(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary 获取签名 JWT（JWS）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJws(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2AccessToken>>;
    /**
     *
     * @summary 颁发签名 JWT（JWS）
     * @param {string} [code]
     * @param {string} [grantType]
     * @param {string} [redirectUri]
     * @param {string} [username]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantJws(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2AccessToken>>;
    /**
     *
     * @summary 颁发 OAuth2 令牌
     * @param {string} [code]
     * @param {string} [grantType]
     * @param {string} [redirectUri]
     * @param {string} [username]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantOAuthToken(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2AccessToken>>;
    /**
     *
     * @summary 颁发默认令牌
     * @param {string} username
     * @param {string} password
     * @param {string} gRecaptchaResponse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantToken(username: string, password: string, gRecaptchaResponse: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2AccessToken>>;
};
/**
 * TokenApi - factory interface
 * @export
 */
export declare const TokenApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary 检查令牌有效性
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkOAuthToken(token: string, options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary 检查令牌有效性
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkOAuthTokenPost(token?: string, options?: any): AxiosPromise<{
        [key: string]: object;
    }>;
    /**
     *
     * @summary 删除令牌
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToken(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 获取 JWT 公钥（JWK）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJwk(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary 获取签名 JWT（JWS）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJws(options?: any): AxiosPromise<OAuth2AccessToken>;
    /**
     *
     * @summary 颁发签名 JWT（JWS）
     * @param {string} [code]
     * @param {string} [grantType]
     * @param {string} [redirectUri]
     * @param {string} [username]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantJws(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any): AxiosPromise<OAuth2AccessToken>;
    /**
     *
     * @summary 颁发 OAuth2 令牌
     * @param {string} [code]
     * @param {string} [grantType]
     * @param {string} [redirectUri]
     * @param {string} [username]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantOAuthToken(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any): AxiosPromise<OAuth2AccessToken>;
    /**
     *
     * @summary 颁发默认令牌
     * @param {string} username
     * @param {string} password
     * @param {string} gRecaptchaResponse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    grantToken(username: string, password: string, gRecaptchaResponse: string, options?: any): AxiosPromise<OAuth2AccessToken>;
};
/**
 * TokenApi - object-oriented interface
 * @export
 * @class TokenApi
 * @extends {BaseAPI}
 */
export declare class TokenApi extends BaseAPI {
    /**
     *
     * @summary 检查令牌有效性
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    checkOAuthToken(token: string, options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary 检查令牌有效性
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    checkOAuthTokenPost(token?: string, options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: object;
    }>>;
    /**
     *
     * @summary 删除令牌
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    deleteToken(options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary 获取 JWT 公钥（JWK）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    getJwk(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     *
     * @summary 获取签名 JWT（JWS）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    getJws(options?: any): Promise<import("axios").AxiosResponse<OAuth2AccessToken>>;
    /**
     *
     * @summary 颁发签名 JWT（JWS）
     * @param {string} [code]
     * @param {string} [grantType]
     * @param {string} [redirectUri]
     * @param {string} [username]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    grantJws(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any): Promise<import("axios").AxiosResponse<OAuth2AccessToken>>;
    /**
     *
     * @summary 颁发 OAuth2 令牌
     * @param {string} [code]
     * @param {string} [grantType]
     * @param {string} [redirectUri]
     * @param {string} [username]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    grantOAuthToken(code?: string, grantType?: string, redirectUri?: string, username?: string, password?: string, options?: any): Promise<import("axios").AxiosResponse<OAuth2AccessToken>>;
    /**
     *
     * @summary 颁发默认令牌
     * @param {string} username
     * @param {string} password
     * @param {string} gRecaptchaResponse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    grantToken(username: string, password: string, gRecaptchaResponse: string, options?: any): Promise<import("axios").AxiosResponse<OAuth2AccessToken>>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 应用需要拥有 read:user 授权。
     * @summary 获取当前 Token 的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenUser: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 检查邮箱是否存在
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isEmailExists: (email: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 检查手机号码是否存在
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isPhoneExists: (phone: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 检查用户名是否存在
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isUsernameExists: (username: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 用户注册（通过邮箱验证码或者手机号）
     * @param {string} username
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: (username: string, password: string, code: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用需要 WRITE_USER_EMAIL 权限。
     * @summary 通过密码更改邮箱
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEmail: (password: string, code: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用需要 WRITE_USER_PASSWORD 权限。
     * @summary 通过原密码更改用户密码
     * @param {string} oldPassword
     * @param {string} newPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword: (oldPassword: string, newPassword: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 邮箱或手机重置密码
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword1: (password: string, code: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用需要 WRITE_USER_PHONE 权限。
     * @summary 通过密码更改手机号码
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPhone: (password: string, code: string, options?: any) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * 应用需要拥有 read:user 授权。
     * @summary 获取当前 Token 的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary 检查邮箱是否存在
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isEmailExists(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @summary 检查手机号码是否存在
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isPhoneExists(phone: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @summary 检查用户名是否存在
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isUsernameExists(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @summary 用户注册（通过邮箱验证码或者手机号）
     * @param {string} username
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(username: string, password: string, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * 应用需要 WRITE_USER_EMAIL 权限。
     * @summary 通过密码更改邮箱
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEmail(password: string, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用需要 WRITE_USER_PASSWORD 权限。
     * @summary 通过原密码更改用户密码
     * @param {string} oldPassword
     * @param {string} newPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(oldPassword: string, newPassword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary 邮箱或手机重置密码
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword1(password: string, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用需要 WRITE_USER_PHONE 权限。
     * @summary 通过密码更改手机号码
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPhone(password: string, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 应用需要拥有 read:user 授权。
     * @summary 获取当前 Token 的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenUser(options?: any): AxiosPromise<User>;
    /**
     *
     * @summary 检查邮箱是否存在
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isEmailExists(email: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary 检查手机号码是否存在
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isPhoneExists(phone: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary 检查用户名是否存在
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isUsernameExists(username: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary 用户注册（通过邮箱验证码或者手机号）
     * @param {string} username
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(username: string, password: string, code: string, options?: any): AxiosPromise<User>;
    /**
     * 应用需要 WRITE_USER_EMAIL 权限。
     * @summary 通过密码更改邮箱
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetEmail(password: string, code: string, options?: any): AxiosPromise<void>;
    /**
     * 应用需要 WRITE_USER_PASSWORD 权限。
     * @summary 通过原密码更改用户密码
     * @param {string} oldPassword
     * @param {string} newPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(oldPassword: string, newPassword: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 邮箱或手机重置密码
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword1(password: string, code: string, options?: any): AxiosPromise<void>;
    /**
     * 应用需要 WRITE_USER_PHONE 权限。
     * @summary 通过密码更改手机号码
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPhone(password: string, code: string, options?: any): AxiosPromise<void>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * 应用需要拥有 read:user 授权。
     * @summary 获取当前 Token 的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getTokenUser(options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary 检查邮箱是否存在
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    isEmailExists(email: string, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     *
     * @summary 检查手机号码是否存在
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    isPhoneExists(phone: string, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     *
     * @summary 检查用户名是否存在
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    isUsernameExists(username: string, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     *
     * @summary 用户注册（通过邮箱验证码或者手机号）
     * @param {string} username
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    register(username: string, password: string, code: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * 应用需要 WRITE_USER_EMAIL 权限。
     * @summary 通过密码更改邮箱
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resetEmail(password: string, code: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用需要 WRITE_USER_PASSWORD 权限。
     * @summary 通过原密码更改用户密码
     * @param {string} oldPassword
     * @param {string} newPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resetPassword(oldPassword: string, newPassword: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     *
     * @summary 邮箱或手机重置密码
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resetPassword1(password: string, code: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用需要 WRITE_USER_PHONE 权限。
     * @summary 通过密码更改手机号码
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resetPhone(password: string, code: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 CREATE_USER 权限。
     * @summary 创建用户（用户名、邮箱、手机号码不可重复）
     * @param {string} username
     * @param {string} password
     * @param {string} [email]
     * @param {string} [phone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (username: string, password: string, email?: string, phone?: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需要 DELETE_USER 权限。
     * @summary 删除用户（永久删除）
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (uid: number, options?: any) => Promise<RequestArgs>;
    /**
     * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 获取用户信息
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (uid: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary 获取用户头像
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAvatar: (uid: number, options?: any) => Promise<RequestArgs>;
    /**
     * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 查找用户
     * @param {Array<number>} [uid]
     * @param {string} [q]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {Array<string>} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: (uid?: Array<number>, q?: string, offset?: number, limit?: number, order?: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户头像
     * @param {number} uid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserAvatar: (uid: number, body: any, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
     * @summary 更新用户邮箱
     * @param {number} uid
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserEmail: (uid: number, code: string, options?: any) => Promise<RequestArgs>;
    /**
     * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户封禁或解封
     * @param {number} uid
     * @param {boolean} enabled
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserEnabled: (uid: number, enabled: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid
     * @param {string} expiredAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserExpiredAt: (uid: number, expiredAt: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户性别
     * @param {number} uid
     * @param {number} gender
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserGender: (uid: number, gender: number, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户昵称
     * @param {number} uid
     * @param {string} nickname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserNickname: (uid: number, nickname: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
     * @summary 更新用户密码
     * @param {number} uid
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPassword: (uid: number, password: string, options?: any) => Promise<RequestArgs>;
    /**
     * 应用和用户需拥有 WRITE_USER_PHONE 权限。
     * @summary 更新用户手机号码
     * @param {number} uid
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPhone: (uid: number, code: string, options?: any) => Promise<RequestArgs>;
    /**
     * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid
     * @param {string} unlockAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserUnlockAt: (uid: number, unlockAt: string, options?: any) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * 应用和用户需要 CREATE_USER 权限。
     * @summary 创建用户（用户名、邮箱、手机号码不可重复）
     * @param {string} username
     * @param {string} password
     * @param {string} [email]
     * @param {string} [phone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(username: string, password: string, email?: string, phone?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * 应用和用户需要 DELETE_USER 权限。
     * @summary 删除用户（永久删除）
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 获取用户信息
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary 获取用户头像
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAvatar(uid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 查找用户
     * @param {Array<number>} [uid]
     * @param {string} [q]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {Array<string>} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(uid?: Array<number>, q?: string, offset?: number, limit?: number, order?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultsUser>>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户头像
     * @param {number} uid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserAvatar(uid: number, body: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
     * @summary 更新用户邮箱
     * @param {number} uid
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserEmail(uid: number, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户封禁或解封
     * @param {number} uid
     * @param {boolean} enabled
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserEnabled(uid: number, enabled: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid
     * @param {string} expiredAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserExpiredAt(uid: number, expiredAt: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户性别
     * @param {number} uid
     * @param {number} gender
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserGender(uid: number, gender: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户昵称
     * @param {number} uid
     * @param {string} nickname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserNickname(uid: number, nickname: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
     * @summary 更新用户密码
     * @param {number} uid
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPassword(uid: number, password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 应用和用户需拥有 WRITE_USER_PHONE 权限。
     * @summary 更新用户手机号码
     * @param {number} uid
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPhone(uid: number, code: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid
     * @param {string} unlockAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserUnlockAt(uid: number, unlockAt: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 应用和用户需要 CREATE_USER 权限。
     * @summary 创建用户（用户名、邮箱、手机号码不可重复）
     * @param {string} username
     * @param {string} password
     * @param {string} [email]
     * @param {string} [phone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(username: string, password: string, email?: string, phone?: string, options?: any): AxiosPromise<User>;
    /**
     * 应用和用户需要 DELETE_USER 权限。
     * @summary 删除用户（永久删除）
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(uid: number, options?: any): AxiosPromise<void>;
    /**
     * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 获取用户信息
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(uid: number, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary 获取用户头像
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAvatar(uid: number, options?: any): AxiosPromise<void>;
    /**
     * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 查找用户
     * @param {Array<number>} [uid]
     * @param {string} [q]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {Array<string>} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(uid?: Array<number>, q?: string, offset?: number, limit?: number, order?: Array<string>, options?: any): AxiosPromise<QueryResultsUser>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户头像
     * @param {number} uid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserAvatar(uid: number, body: any, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
     * @summary 更新用户邮箱
     * @param {number} uid
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserEmail(uid: number, code: string, options?: any): AxiosPromise<void>;
    /**
     * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户封禁或解封
     * @param {number} uid
     * @param {boolean} enabled
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserEnabled(uid: number, enabled: boolean, options?: any): AxiosPromise<void>;
    /**
     * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid
     * @param {string} expiredAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserExpiredAt(uid: number, expiredAt: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户性别
     * @param {number} uid
     * @param {number} gender
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserGender(uid: number, gender: number, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户昵称
     * @param {number} uid
     * @param {string} nickname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserNickname(uid: number, nickname: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
     * @summary 更新用户密码
     * @param {number} uid
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPassword(uid: number, password: string, options?: any): AxiosPromise<void>;
    /**
     * 应用和用户需拥有 WRITE_USER_PHONE 权限。
     * @summary 更新用户手机号码
     * @param {number} uid
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPhone(uid: number, code: string, options?: any): AxiosPromise<void>;
    /**
     * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid
     * @param {string} unlockAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserUnlockAt(uid: number, unlockAt: string, options?: any): AxiosPromise<void>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * 应用和用户需要 CREATE_USER 权限。
     * @summary 创建用户（用户名、邮箱、手机号码不可重复）
     * @param {string} username
     * @param {string} password
     * @param {string} [email]
     * @param {string} [phone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(username: string, password: string, email?: string, phone?: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * 应用和用户需要 DELETE_USER 权限。
     * @summary 删除用户（永久删除）
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(uid: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 获取用户信息
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(uid: number, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary 获取用户头像
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserAvatar(uid: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 查找用户
     * @param {Array<number>} [uid]
     * @param {string} [q]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {Array<string>} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsers(uid?: Array<number>, q?: string, offset?: number, limit?: number, order?: Array<string>, options?: any): Promise<import("axios").AxiosResponse<QueryResultsUser>>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户头像
     * @param {number} uid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserAvatar(uid: number, body: any, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
     * @summary 更新用户邮箱
     * @param {number} uid
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserEmail(uid: number, code: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户封禁或解封
     * @param {number} uid
     * @param {boolean} enabled
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserEnabled(uid: number, enabled: boolean, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid
     * @param {string} expiredAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserExpiredAt(uid: number, expiredAt: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户性别
     * @param {number} uid
     * @param {number} gender
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserGender(uid: number, gender: number, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户昵称
     * @param {number} uid
     * @param {string} nickname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserNickname(uid: number, nickname: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
     * @summary 更新用户密码
     * @param {number} uid
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserPassword(uid: number, password: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 应用和用户需拥有 WRITE_USER_PHONE 权限。
     * @summary 更新用户手机号码
     * @param {number} uid
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserPhone(uid: number, code: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid
     * @param {string} unlockAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserUnlockAt(uid: number, unlockAt: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
