"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Auth Service
 * 提供身份管理服务以及OAuth2授权服务。身份管理服务包含用户管理、角色管理、权限管理等，OAuth2授权服务包含应用管理、应用授权模式与授权作用域管理等。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@dustlight.cn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiAxiosParamCreator = exports.TokenApi = exports.TokenApiFactory = exports.TokenApiFp = exports.TokenApiAxiosParamCreator = exports.ScopesApi = exports.ScopesApiFactory = exports.ScopesApiFp = exports.ScopesApiAxiosParamCreator = exports.RolesApi = exports.RolesApiFactory = exports.RolesApiFp = exports.RolesApiAxiosParamCreator = exports.GrantTypesApi = exports.GrantTypesApiFactory = exports.GrantTypesApiFp = exports.GrantTypesApiAxiosParamCreator = exports.CodeApi = exports.CodeApiFactory = exports.CodeApiFp = exports.CodeApiAxiosParamCreator = exports.ClientsApi = exports.ClientsApiFactory = exports.ClientsApiFp = exports.ClientsApiAxiosParamCreator = exports.AuthorizationApi = exports.AuthorizationApiFactory = exports.AuthorizationApiFp = exports.AuthorizationApiAxiosParamCreator = exports.AuthoritiesApi = exports.AuthoritiesApiFactory = exports.AuthoritiesApiFp = exports.AuthoritiesApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * AuthoritiesApi - axios parameter creator
 * @export
 */
const AuthoritiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 删除权限
         * @param {Array<number>} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorities: (requestBody, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'requestBody' is not null or undefined
            common_1.assertParamExists('deleteAuthorities', 'requestBody', requestBody);
            const localVarPath = `/v1/authorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 删除应用权限
         * @param {string} cid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientAuthorities: (cid, authorityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('deleteClientAuthorities', 'cid', cid);
            // verify required parameter 'authorityId' is not null or undefined
            common_1.assertParamExists('deleteClientAuthorities', 'authorityId', authorityId);
            const localVarPath = `/v1/clients/{cid}/authorities`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 删除角色权限
         * @param {number} rid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleAuthorities: (rid, authorityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'rid' is not null or undefined
            common_1.assertParamExists('deleteRoleAuthorities', 'rid', rid);
            // verify required parameter 'authorityId' is not null or undefined
            common_1.assertParamExists('deleteRoleAuthorities', 'authorityId', authorityId);
            const localVarPath = `/v1/roles/{rid}/authorities`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取权限
         * @param {Array<number>} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorities: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/authorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientAuthorities: (cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('getClientAuthorities', 'cid', cid);
            const localVarPath = `/v1/clients/{cid}/authorities`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取角色权限
         * @param {number} rid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAuthorities: (rid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'rid' is not null or undefined
            common_1.assertParamExists('getRoleAuthorities', 'rid', rid);
            const localVarPath = `/v1/roles/{rid}/authorities`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientAuthorities: (uid, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('getUserClientAuthorities', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('getUserClientAuthorities', 'cid', cid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/authorities`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 修改或添加权限
         * @param {Array<Authority>} authority
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAuthorities: (authority, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'authority' is not null or undefined
            common_1.assertParamExists('setAuthorities', 'authority', authority);
            const localVarPath = `/v1/authorities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(authority, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 添加应用权限
         * @param {string} cid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setClientAuthorities: (cid, authorityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('setClientAuthorities', 'cid', cid);
            // verify required parameter 'authorityId' is not null or undefined
            common_1.assertParamExists('setClientAuthorities', 'authorityId', authorityId);
            const localVarPath = `/v1/clients/{cid}/authorities`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 添加角色权限
         * @param {number} rid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoleAuthorities: (rid, authorityId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'rid' is not null or undefined
            common_1.assertParamExists('setRoleAuthorities', 'rid', rid);
            // verify required parameter 'authorityId' is not null or undefined
            common_1.assertParamExists('setRoleAuthorities', 'authorityId', authorityId);
            const localVarPath = `/v1/roles/{rid}/authorities`
                .replace(`{${"rid"}}`, encodeURIComponent(String(rid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (authorityId) {
                localVarQueryParameter['authorityId'] = authorityId;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AuthoritiesApiAxiosParamCreator = AuthoritiesApiAxiosParamCreator;
/**
 * AuthoritiesApi - functional programming interface
 * @export
 */
const AuthoritiesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AuthoritiesApiAxiosParamCreator(configuration);
    return {
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 删除权限
         * @param {Array<number>} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorities(requestBody, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAuthorities(requestBody, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 删除应用权限
         * @param {string} cid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientAuthorities(cid, authorityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteClientAuthorities(cid, authorityId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 删除角色权限
         * @param {number} rid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleAuthorities(rid, authorityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRoleAuthorities(rid, authorityId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取权限
         * @param {Array<number>} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorities(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthorities(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientAuthorities(cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getClientAuthorities(cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取角色权限
         * @param {number} rid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAuthorities(rid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRoleAuthorities(rid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientAuthorities(uid, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserClientAuthorities(uid, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 修改或添加权限
         * @param {Array<Authority>} authority
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAuthorities(authority, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setAuthorities(authority, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 添加应用权限
         * @param {string} cid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setClientAuthorities(cid, authorityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setClientAuthorities(cid, authorityId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 添加角色权限
         * @param {number} rid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoleAuthorities(rid, authorityId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setRoleAuthorities(rid, authorityId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AuthoritiesApiFp = AuthoritiesApiFp;
/**
 * AuthoritiesApi - factory interface
 * @export
 */
const AuthoritiesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AuthoritiesApiFp(configuration);
    return {
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 删除权限
         * @param {Array<number>} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorities(requestBody, options) {
            return localVarFp.deleteAuthorities(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 删除应用权限
         * @param {string} cid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientAuthorities(cid, authorityId, options) {
            return localVarFp.deleteClientAuthorities(cid, authorityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 删除角色权限
         * @param {number} rid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoleAuthorities(rid, authorityId, options) {
            return localVarFp.deleteRoleAuthorities(rid, authorityId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取权限
         * @param {Array<number>} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorities(id, options) {
            return localVarFp.getAuthorities(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientAuthorities(cid, options) {
            return localVarFp.getClientAuthorities(cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取角色权限
         * @param {number} rid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAuthorities(rid, options) {
            return localVarFp.getRoleAuthorities(rid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用权限
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientAuthorities(uid, cid, options) {
            return localVarFp.getUserClientAuthorities(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_AUTHORITY 权限。
         * @summary 修改或添加权限
         * @param {Array<Authority>} authority
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAuthorities(authority, options) {
            return localVarFp.setAuthorities(authority, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_CLIENT 权限。
         * @summary 添加应用权限
         * @param {string} cid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setClientAuthorities(cid, authorityId, options) {
            return localVarFp.setClientAuthorities(cid, authorityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_ROLE 权限。
         * @summary 添加角色权限
         * @param {number} rid
         * @param {Array<number>} authorityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoleAuthorities(rid, authorityId, options) {
            return localVarFp.setRoleAuthorities(rid, authorityId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthoritiesApiFactory = AuthoritiesApiFactory;
/**
 * AuthoritiesApi - object-oriented interface
 * @export
 * @class AuthoritiesApi
 * @extends {BaseAPI}
 */
class AuthoritiesApi extends base_1.BaseAPI {
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 删除权限
     * @param {Array<number>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    deleteAuthorities(requestBody, options) {
        return exports.AuthoritiesApiFp(this.configuration).deleteAuthorities(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 删除应用权限
     * @param {string} cid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    deleteClientAuthorities(cid, authorityId, options) {
        return exports.AuthoritiesApiFp(this.configuration).deleteClientAuthorities(cid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 删除角色权限
     * @param {number} rid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    deleteRoleAuthorities(rid, authorityId, options) {
        return exports.AuthoritiesApiFp(this.configuration).deleteRoleAuthorities(rid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取权限
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    getAuthorities(id, options) {
        return exports.AuthoritiesApiFp(this.configuration).getAuthorities(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    getClientAuthorities(cid, options) {
        return exports.AuthoritiesApiFp(this.configuration).getClientAuthorities(cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取角色权限
     * @param {number} rid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    getRoleAuthorities(rid, options) {
        return exports.AuthoritiesApiFp(this.configuration).getRoleAuthorities(rid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用权限
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    getUserClientAuthorities(uid, cid, options) {
        return exports.AuthoritiesApiFp(this.configuration).getUserClientAuthorities(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_AUTHORITY 权限。
     * @summary 修改或添加权限
     * @param {Array<Authority>} authority
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    setAuthorities(authority, options) {
        return exports.AuthoritiesApiFp(this.configuration).setAuthorities(authority, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 GRANT_CLIENT 权限。
     * @summary 添加应用权限
     * @param {string} cid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    setClientAuthorities(cid, authorityId, options) {
        return exports.AuthoritiesApiFp(this.configuration).setClientAuthorities(cid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 GRANT_ROLE 权限。
     * @summary 添加角色权限
     * @param {number} rid
     * @param {Array<number>} authorityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthoritiesApi
     */
    setRoleAuthorities(rid, authorityId, options) {
        return exports.AuthoritiesApiFp(this.configuration).setRoleAuthorities(rid, authorityId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthoritiesApi = AuthoritiesApi;
/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
const AuthorizationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 应用需要 AUTHORIZE 权限。
         * @summary 应用授权
         * @param {boolean} approved
         * @param {Set<string>} scope
         * @param {boolean} [jwt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorization: (approved, scope, jwt, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'approved' is not null or undefined
            common_1.assertParamExists('createAuthorization', 'approved', approved);
            // verify required parameter 'scope' is not null or undefined
            common_1.assertParamExists('createAuthorization', 'scope', scope);
            const localVarPath = `/v1/oauth/authorization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (approved !== undefined) {
                localVarQueryParameter['approved'] = approved;
            }
            if (scope) {
                localVarQueryParameter['scope'] = Array.from(scope);
            }
            if (jwt !== undefined) {
                localVarQueryParameter['jwt'] = jwt;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
         * @summary 获取应用授权
         * @param {string} clientId
         * @param {string} [responseType]
         * @param {string} [redirectUri]
         * @param {Array<string>} [scope]
         * @param {string} [state]
         * @param {boolean} [jwt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorization: (clientId, responseType, redirectUri, scope, state, jwt, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'clientId' is not null or undefined
            common_1.assertParamExists('getAuthorization', 'clientId', clientId);
            const localVarPath = `/v1/oauth/authorization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }
            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }
            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }
            if (scope) {
                localVarQueryParameter['scope'] = scope;
            }
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            if (jwt !== undefined) {
                localVarQueryParameter['jwt'] = jwt;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.AuthorizationApiAxiosParamCreator = AuthorizationApiAxiosParamCreator;
/**
 * AuthorizationApi - functional programming interface
 * @export
 */
const AuthorizationApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.AuthorizationApiAxiosParamCreator(configuration);
    return {
        /**
         * 应用需要 AUTHORIZE 权限。
         * @summary 应用授权
         * @param {boolean} approved
         * @param {Set<string>} scope
         * @param {boolean} [jwt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorization(approved, scope, jwt, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAuthorization(approved, scope, jwt, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
         * @summary 获取应用授权
         * @param {string} clientId
         * @param {string} [responseType]
         * @param {string} [redirectUri]
         * @param {Array<string>} [scope]
         * @param {string} [state]
         * @param {boolean} [jwt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorization(clientId, responseType, redirectUri, scope, state, jwt, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAuthorization(clientId, responseType, redirectUri, scope, state, jwt, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.AuthorizationApiFp = AuthorizationApiFp;
/**
 * AuthorizationApi - factory interface
 * @export
 */
const AuthorizationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.AuthorizationApiFp(configuration);
    return {
        /**
         * 应用需要 AUTHORIZE 权限。
         * @summary 应用授权
         * @param {boolean} approved
         * @param {Set<string>} scope
         * @param {boolean} [jwt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorization(approved, scope, jwt, options) {
            return localVarFp.createAuthorization(approved, scope, jwt, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
         * @summary 获取应用授权
         * @param {string} clientId
         * @param {string} [responseType]
         * @param {string} [redirectUri]
         * @param {Array<string>} [scope]
         * @param {string} [state]
         * @param {boolean} [jwt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorization(clientId, responseType, redirectUri, scope, state, jwt, options) {
            return localVarFp.getAuthorization(clientId, responseType, redirectUri, scope, state, jwt, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthorizationApiFactory = AuthorizationApiFactory;
/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
class AuthorizationApi extends base_1.BaseAPI {
    /**
     * 应用需要 AUTHORIZE 权限。
     * @summary 应用授权
     * @param {boolean} approved
     * @param {Set<string>} scope
     * @param {boolean} [jwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    createAuthorization(approved, scope, jwt, options) {
        return exports.AuthorizationApiFp(this.configuration).createAuthorization(approved, scope, jwt, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 获取包含应用信息、所属用户信息、回调地址以及是否已授权。应用需要 AUTHORIZE 权限。
     * @summary 获取应用授权
     * @param {string} clientId
     * @param {string} [responseType]
     * @param {string} [redirectUri]
     * @param {Array<string>} [scope]
     * @param {string} [state]
     * @param {boolean} [jwt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    getAuthorization(clientId, responseType, redirectUri, scope, state, jwt, options) {
        return exports.AuthorizationApiFp(this.configuration).getAuthorization(clientId, responseType, redirectUri, scope, state, jwt, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthorizationApi = AuthorizationApi;
/**
 * ClientsApi - axios parameter creator
 * @export
 */
const ClientsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 创建应用
         * @param {number} uid
         * @param {string} name
         * @param {string} description
         * @param {string} redirectUri
         * @param {Array<number>} [scopes]
         * @param {Array<number>} [grantTypes]
         * @param {number} [accessTokenValidity]
         * @param {number} [refreshTokenValidity]
         * @param {string} [additionalInformation]
         * @param {number} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient: (uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('createClient', 'uid', uid);
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('createClient', 'name', name);
            // verify required parameter 'description' is not null or undefined
            common_1.assertParamExists('createClient', 'description', description);
            // verify required parameter 'redirectUri' is not null or undefined
            common_1.assertParamExists('createClient', 'redirectUri', redirectUri);
            const localVarPath = `/v1/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }
            if (scopes) {
                localVarQueryParameter['scopes'] = scopes;
            }
            if (grantTypes) {
                localVarQueryParameter['grantTypes'] = grantTypes;
            }
            if (accessTokenValidity !== undefined) {
                localVarQueryParameter['accessTokenValidity'] = accessTokenValidity;
            }
            if (refreshTokenValidity !== undefined) {
                localVarQueryParameter['refreshTokenValidity'] = refreshTokenValidity;
            }
            if (additionalInformation !== undefined) {
                localVarQueryParameter['additionalInformation'] = additionalInformation;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
         * @summary 创建用户应用
         * @param {number} uid
         * @param {string} name
         * @param {string} description
         * @param {string} redirectUri
         * @param {Array<number>} [scopes]
         * @param {Array<number>} [grantTypes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserClient: (uid, name, description, redirectUri, scopes, grantTypes, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('createUserClient', 'uid', uid);
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('createUserClient', 'name', name);
            // verify required parameter 'description' is not null or undefined
            common_1.assertParamExists('createUserClient', 'description', description);
            // verify required parameter 'redirectUri' is not null or undefined
            common_1.assertParamExists('createUserClient', 'redirectUri', redirectUri);
            const localVarPath = `/v1/users/{uid}/clients`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }
            if (scopes) {
                localVarQueryParameter['scopes'] = scopes;
            }
            if (grantTypes) {
                localVarQueryParameter['grantTypes'] = grantTypes;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient: (cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('getClient', 'cid', cid);
            const localVarPath = `/v1/clients/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取应用 Logo
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientLogo: (cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('getClientLogo', 'cid', cid);
            const localVarPath = `/v1/clients/{cid}/logo`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 查询应用
         * @param {string} [q]
         * @param {Array<string>} [order]
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients: (q, order, offset, limit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (order) {
                localVarQueryParameter['order'] = order;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClient: (uid, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('getUserClient', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('getUserClient', 'cid', cid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用 Logo
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientLogo: (uid, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('getUserClientLogo', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('getUserClientLogo', 'cid', cid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/logo`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 查询用户应用
         * @param {number} uid
         * @param {string} [q]
         * @param {Array<string>} [order]
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClients: (uid, q, order, offset, limit, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('getUserClients', 'uid', uid);
            const localVarPath = `/v1/users/{uid}/clients`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (order) {
                localVarQueryParameter['order'] = order;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClient: (cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('removeClient', 'cid', cid);
            const localVarPath = `/v1/clients/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {Array<string>} cids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClients: (cids, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cids' is not null or undefined
            common_1.assertParamExists('removeClients', 'cids', cids);
            const localVarPath = `/v1/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (cids) {
                localVarQueryParameter['cids'] = cids;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClient: (uid, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('removeUserClient', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('removeUserClient', 'cid', cid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid
         * @param {Array<string>} cids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClients: (uid, cids, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('removeUserClients', 'uid', uid);
            // verify required parameter 'cids' is not null or undefined
            common_1.assertParamExists('removeUserClients', 'cids', cids);
            const localVarPath = `/v1/users/{uid}/clients`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (cids) {
                localVarQueryParameter['cids'] = cids;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用AccessToken有效期
         * @param {string} cid
         * @param {number} accessTokenValidity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientAccessTokenValidity: (cid, accessTokenValidity, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateClientAccessTokenValidity', 'cid', cid);
            // verify required parameter 'accessTokenValidity' is not null or undefined
            common_1.assertParamExists('updateClientAccessTokenValidity', 'accessTokenValidity', accessTokenValidity);
            const localVarPath = `/v1/clients/{cid}/access-token-validity`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (accessTokenValidity !== undefined) {
                localVarQueryParameter['accessTokenValidity'] = accessTokenValidity;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用描述
         * @param {string} cid
         * @param {string} description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientDescription: (cid, description, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateClientDescription', 'cid', cid);
            // verify required parameter 'description' is not null or undefined
            common_1.assertParamExists('updateClientDescription', 'description', description);
            const localVarPath = `/v1/clients/{cid}/description`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用 Logo
         * @param {string} cid
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientLogo: (cid, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateClientLogo', 'cid', cid);
            // verify required parameter 'body' is not null or undefined
            common_1.assertParamExists('updateClientLogo', 'body', body);
            const localVarPath = `/v1/clients/{cid}/logo`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'image/_*';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用名称
         * @param {string} cid
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientName: (cid, name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateClientName', 'cid', cid);
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('updateClientName', 'name', name);
            const localVarPath = `/v1/clients/{cid}/name`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用回调地址
         * @param {string} cid
         * @param {string} redirectUri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRedirectUri: (cid, redirectUri, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateClientRedirectUri', 'cid', cid);
            // verify required parameter 'redirectUri' is not null or undefined
            common_1.assertParamExists('updateClientRedirectUri', 'redirectUri', redirectUri);
            const localVarPath = `/v1/clients/{cid}/redirect`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用RefreshToken有效期
         * @param {string} cid
         * @param {number} refreshTokenValidity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRefreshTokenValidity: (cid, refreshTokenValidity, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateClientRefreshTokenValidity', 'cid', cid);
            // verify required parameter 'refreshTokenValidity' is not null or undefined
            common_1.assertParamExists('updateClientRefreshTokenValidity', 'refreshTokenValidity', refreshTokenValidity);
            const localVarPath = `/v1/clients/{cid}/refresh-token-validity`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (refreshTokenValidity !== undefined) {
                localVarQueryParameter['refreshTokenValidity'] = refreshTokenValidity;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用密钥
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret: (cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateClientSecret', 'cid', cid);
            const localVarPath = `/v1/clients/{cid}/secret`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用状态
         * @param {string} cid
         * @param {number} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientStatus: (cid, status, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateClientStatus', 'cid', cid);
            // verify required parameter 'status' is not null or undefined
            common_1.assertParamExists('updateClientStatus', 'status', status);
            const localVarPath = `/v1/clients/{cid}/status`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用描述
         * @param {number} uid
         * @param {string} cid
         * @param {string} description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientDescription: (uid, cid, description, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserClientDescription', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateUserClientDescription', 'cid', cid);
            // verify required parameter 'description' is not null or undefined
            common_1.assertParamExists('updateUserClientDescription', 'description', description);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/description`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用 Logo
         * @param {number} uid
         * @param {string} cid
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientLogo: (uid, cid, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserClientLogo', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateUserClientLogo', 'cid', cid);
            // verify required parameter 'body' is not null or undefined
            common_1.assertParamExists('updateUserClientLogo', 'body', body);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/logo`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'image/_*';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用名称
         * @param {number} uid
         * @param {string} cid
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientName: (uid, cid, name, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserClientName', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateUserClientName', 'cid', cid);
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('updateUserClientName', 'name', name);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/name`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用回调地址
         * @param {number} uid
         * @param {string} cid
         * @param {string} redirectUri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientRedirectUri: (uid, cid, redirectUri, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserClientRedirectUri', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateUserClientRedirectUri', 'cid', cid);
            // verify required parameter 'redirectUri' is not null or undefined
            common_1.assertParamExists('updateUserClientRedirectUri', 'redirectUri', redirectUri);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/redirect`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (redirectUri !== undefined) {
                localVarQueryParameter['redirectUri'] = redirectUri;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用密钥
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientSecret: (uid, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserClientSecret', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('updateUserClientSecret', 'cid', cid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/secret`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ClientsApiAxiosParamCreator = ClientsApiAxiosParamCreator;
/**
 * ClientsApi - functional programming interface
 * @export
 */
const ClientsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ClientsApiAxiosParamCreator(configuration);
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 创建应用
         * @param {number} uid
         * @param {string} name
         * @param {string} description
         * @param {string} redirectUri
         * @param {Array<number>} [scopes]
         * @param {Array<number>} [grantTypes]
         * @param {number} [accessTokenValidity]
         * @param {number} [refreshTokenValidity]
         * @param {string} [additionalInformation]
         * @param {number} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
         * @summary 创建用户应用
         * @param {number} uid
         * @param {string} name
         * @param {string} description
         * @param {string} redirectUri
         * @param {Array<number>} [scopes]
         * @param {Array<number>} [grantTypes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserClient(uid, name, description, redirectUri, scopes, grantTypes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createUserClient(uid, name, description, redirectUri, scopes, grantTypes, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getClient(cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取应用 Logo
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientLogo(cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getClientLogo(cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 查询应用
         * @param {string} [q]
         * @param {Array<string>} [order]
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients(q, order, offset, limit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getClients(q, order, offset, limit, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClient(uid, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserClient(uid, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用 Logo
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientLogo(uid, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserClientLogo(uid, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 查询用户应用
         * @param {number} uid
         * @param {string} [q]
         * @param {Array<string>} [order]
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClients(uid, q, order, offset, limit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserClients(uid, q, order, offset, limit, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClient(cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeClient(cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {Array<string>} cids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClients(cids, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeClients(cids, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClient(uid, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeUserClient(uid, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid
         * @param {Array<string>} cids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClients(uid, cids, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeUserClients(uid, cids, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用AccessToken有效期
         * @param {string} cid
         * @param {number} accessTokenValidity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientAccessTokenValidity(cid, accessTokenValidity, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateClientAccessTokenValidity(cid, accessTokenValidity, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用描述
         * @param {string} cid
         * @param {string} description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientDescription(cid, description, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateClientDescription(cid, description, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用 Logo
         * @param {string} cid
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientLogo(cid, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateClientLogo(cid, body, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用名称
         * @param {string} cid
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientName(cid, name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateClientName(cid, name, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用回调地址
         * @param {string} cid
         * @param {string} redirectUri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRedirectUri(cid, redirectUri, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateClientRedirectUri(cid, redirectUri, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用RefreshToken有效期
         * @param {string} cid
         * @param {number} refreshTokenValidity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRefreshTokenValidity(cid, refreshTokenValidity, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateClientRefreshTokenValidity(cid, refreshTokenValidity, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用密钥
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret(cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateClientSecret(cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用状态
         * @param {string} cid
         * @param {number} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientStatus(cid, status, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateClientStatus(cid, status, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用描述
         * @param {number} uid
         * @param {string} cid
         * @param {string} description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientDescription(uid, cid, description, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserClientDescription(uid, cid, description, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用 Logo
         * @param {number} uid
         * @param {string} cid
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientLogo(uid, cid, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserClientLogo(uid, cid, body, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用名称
         * @param {number} uid
         * @param {string} cid
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientName(uid, cid, name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserClientName(uid, cid, name, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用回调地址
         * @param {number} uid
         * @param {string} cid
         * @param {string} redirectUri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientRedirectUri(uid, cid, redirectUri, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserClientRedirectUri(uid, cid, redirectUri, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用密钥
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientSecret(uid, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserClientSecret(uid, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ClientsApiFp = ClientsApiFp;
/**
 * ClientsApi - factory interface
 * @export
 */
const ClientsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ClientsApiFp(configuration);
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 创建应用
         * @param {number} uid
         * @param {string} name
         * @param {string} description
         * @param {string} redirectUri
         * @param {Array<number>} [scopes]
         * @param {Array<number>} [grantTypes]
         * @param {number} [accessTokenValidity]
         * @param {number} [refreshTokenValidity]
         * @param {string} [additionalInformation]
         * @param {number} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options) {
            return localVarFp.createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
         * @summary 创建用户应用
         * @param {number} uid
         * @param {string} name
         * @param {string} description
         * @param {string} redirectUri
         * @param {Array<number>} [scopes]
         * @param {Array<number>} [grantTypes]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserClient(uid, name, description, redirectUri, scopes, grantTypes, options) {
            return localVarFp.createUserClient(uid, name, description, redirectUri, scopes, grantTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(cid, options) {
            return localVarFp.getClient(cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取应用 Logo
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientLogo(cid, options) {
            return localVarFp.getClientLogo(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 查询应用
         * @param {string} [q]
         * @param {Array<string>} [order]
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients(q, order, offset, limit, options) {
            return localVarFp.getClients(q, order, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClient(uid, cid, options) {
            return localVarFp.getUserClient(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取用户应用 Logo
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientLogo(uid, cid, options) {
            return localVarFp.getUserClientLogo(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 查询用户应用
         * @param {number} uid
         * @param {string} [q]
         * @param {Array<string>} [order]
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClients(uid, q, order, offset, limit, options) {
            return localVarFp.getUserClients(uid, q, order, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClient(cid, options) {
            return localVarFp.removeClient(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用
         * @param {Array<string>} cids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClients(cids, options) {
            return localVarFp.removeClients(cids, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClient(uid, cid, options) {
            return localVarFp.removeUserClient(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 删除用户应用
         * @param {number} uid
         * @param {Array<string>} cids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClients(uid, cids, options) {
            return localVarFp.removeUserClients(uid, cids, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用AccessToken有效期
         * @param {string} cid
         * @param {number} accessTokenValidity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientAccessTokenValidity(cid, accessTokenValidity, options) {
            return localVarFp.updateClientAccessTokenValidity(cid, accessTokenValidity, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用描述
         * @param {string} cid
         * @param {string} description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientDescription(cid, description, options) {
            return localVarFp.updateClientDescription(cid, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用 Logo
         * @param {string} cid
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientLogo(cid, body, options) {
            return localVarFp.updateClientLogo(cid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用名称
         * @param {string} cid
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientName(cid, name, options) {
            return localVarFp.updateClientName(cid, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用回调地址
         * @param {string} cid
         * @param {string} redirectUri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRedirectUri(cid, redirectUri, options) {
            return localVarFp.updateClientRedirectUri(cid, redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用RefreshToken有效期
         * @param {string} cid
         * @param {number} refreshTokenValidity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientRefreshTokenValidity(cid, refreshTokenValidity, options) {
            return localVarFp.updateClientRefreshTokenValidity(cid, refreshTokenValidity, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用密钥
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientSecret(cid, options) {
            return localVarFp.updateClientSecret(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 更新应用状态
         * @param {string} cid
         * @param {number} status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientStatus(cid, status, options) {
            return localVarFp.updateClientStatus(cid, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用描述
         * @param {number} uid
         * @param {string} cid
         * @param {string} description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientDescription(uid, cid, description, options) {
            return localVarFp.updateUserClientDescription(uid, cid, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用 Logo
         * @param {number} uid
         * @param {string} cid
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientLogo(uid, cid, body, options) {
            return localVarFp.updateUserClientLogo(uid, cid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用名称
         * @param {number} uid
         * @param {string} cid
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientName(uid, cid, name, options) {
            return localVarFp.updateUserClientName(uid, cid, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用回调地址
         * @param {number} uid
         * @param {string} cid
         * @param {string} redirectUri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientRedirectUri(uid, cid, redirectUri, options) {
            return localVarFp.updateUserClientRedirectUri(uid, cid, redirectUri, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 更新用户应用密钥
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserClientSecret(uid, cid, options) {
            return localVarFp.updateUserClientSecret(uid, cid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ClientsApiFactory = ClientsApiFactory;
/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
class ClientsApi extends base_1.BaseAPI {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 创建应用
     * @param {number} uid
     * @param {string} name
     * @param {string} description
     * @param {string} redirectUri
     * @param {Array<number>} [scopes]
     * @param {Array<number>} [grantTypes]
     * @param {number} [accessTokenValidity]
     * @param {number} [refreshTokenValidity]
     * @param {string} [additionalInformation]
     * @param {number} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options) {
        return exports.ClientsApiFp(this.configuration).createClient(uid, name, description, redirectUri, scopes, grantTypes, accessTokenValidity, refreshTokenValidity, additionalInformation, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限，或者应用拥有 WRITE_CLIENT 权限且 uid 为当前用户并拥有 CREATE_CLIENT 权限）
     * @summary 创建用户应用
     * @param {number} uid
     * @param {string} name
     * @param {string} description
     * @param {string} redirectUri
     * @param {Array<number>} [scopes]
     * @param {Array<number>} [grantTypes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    createUserClient(uid, name, description, redirectUri, scopes, grantTypes, options) {
        return exports.ClientsApiFp(this.configuration).createUserClient(uid, name, description, redirectUri, scopes, grantTypes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getClient(cid, options) {
        return exports.ClientsApiFp(this.configuration).getClient(cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取应用 Logo
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getClientLogo(cid, options) {
        return exports.ClientsApiFp(this.configuration).getClientLogo(cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 查询应用
     * @param {string} [q]
     * @param {Array<string>} [order]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getClients(q, order, offset, limit, options) {
        return exports.ClientsApiFp(this.configuration).getClients(q, order, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getUserClient(uid, cid, options) {
        return exports.ClientsApiFp(this.configuration).getUserClient(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取用户应用 Logo
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getUserClientLogo(uid, cid, options) {
        return exports.ClientsApiFp(this.configuration).getUserClientLogo(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 查询用户应用
     * @param {number} uid
     * @param {string} [q]
     * @param {Array<string>} [order]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    getUserClients(uid, q, order, offset, limit, options) {
        return exports.ClientsApiFp(this.configuration).getUserClients(uid, q, order, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    removeClient(cid, options) {
        return exports.ClientsApiFp(this.configuration).removeClient(cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用
     * @param {Array<string>} cids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    removeClients(cids, options) {
        return exports.ClientsApiFp(this.configuration).removeClients(cids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    removeUserClient(uid, cid, options) {
        return exports.ClientsApiFp(this.configuration).removeUserClient(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 删除用户应用
     * @param {number} uid
     * @param {Array<string>} cids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    removeUserClients(uid, cids, options) {
        return exports.ClientsApiFp(this.configuration).removeUserClients(uid, cids, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用AccessToken有效期
     * @param {string} cid
     * @param {number} accessTokenValidity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientAccessTokenValidity(cid, accessTokenValidity, options) {
        return exports.ClientsApiFp(this.configuration).updateClientAccessTokenValidity(cid, accessTokenValidity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用描述
     * @param {string} cid
     * @param {string} description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientDescription(cid, description, options) {
        return exports.ClientsApiFp(this.configuration).updateClientDescription(cid, description, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用 Logo
     * @param {string} cid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientLogo(cid, body, options) {
        return exports.ClientsApiFp(this.configuration).updateClientLogo(cid, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用名称
     * @param {string} cid
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientName(cid, name, options) {
        return exports.ClientsApiFp(this.configuration).updateClientName(cid, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用回调地址
     * @param {string} cid
     * @param {string} redirectUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientRedirectUri(cid, redirectUri, options) {
        return exports.ClientsApiFp(this.configuration).updateClientRedirectUri(cid, redirectUri, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用RefreshToken有效期
     * @param {string} cid
     * @param {number} refreshTokenValidity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientRefreshTokenValidity(cid, refreshTokenValidity, options) {
        return exports.ClientsApiFp(this.configuration).updateClientRefreshTokenValidity(cid, refreshTokenValidity, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用密钥
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientSecret(cid, options) {
        return exports.ClientsApiFp(this.configuration).updateClientSecret(cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 更新应用状态
     * @param {string} cid
     * @param {number} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateClientStatus(cid, status, options) {
        return exports.ClientsApiFp(this.configuration).updateClientStatus(cid, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用描述
     * @param {number} uid
     * @param {string} cid
     * @param {string} description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateUserClientDescription(uid, cid, description, options) {
        return exports.ClientsApiFp(this.configuration).updateUserClientDescription(uid, cid, description, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用 Logo
     * @param {number} uid
     * @param {string} cid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateUserClientLogo(uid, cid, body, options) {
        return exports.ClientsApiFp(this.configuration).updateUserClientLogo(uid, cid, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用名称
     * @param {number} uid
     * @param {string} cid
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateUserClientName(uid, cid, name, options) {
        return exports.ClientsApiFp(this.configuration).updateUserClientName(uid, cid, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用回调地址
     * @param {number} uid
     * @param {string} cid
     * @param {string} redirectUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateUserClientRedirectUri(uid, cid, redirectUri, options) {
        return exports.ClientsApiFp(this.configuration).updateUserClientRedirectUri(uid, cid, redirectUri, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 更新用户应用密钥
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    updateUserClientSecret(uid, cid, options) {
        return exports.ClientsApiFp(this.configuration).updateUserClientSecret(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ClientsApi = ClientsApi;
/**
 * CodeApi - axios parameter creator
 * @export
 */
const CodeApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationCode: (gRecaptchaResponse, email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            common_1.assertParamExists('createRegistrationCode', 'gRecaptchaResponse', gRecaptchaResponse);
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('createRegistrationCode', 'email', email);
            const localVarPath = `/v1/code/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationEmailCode: (gRecaptchaResponse, email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            common_1.assertParamExists('createRegistrationEmailCode', 'gRecaptchaResponse', gRecaptchaResponse);
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('createRegistrationEmailCode', 'email', email);
            const localVarPath = `/v1/code/registration/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 发送验证码到手机，用于注册。
         * @summary 获取注册手机验证码
         * @param {string} gRecaptchaResponse
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationPhoneCode: (gRecaptchaResponse, phone, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            common_1.assertParamExists('createRegistrationPhoneCode', 'gRecaptchaResponse', gRecaptchaResponse);
            // verify required parameter 'phone' is not null or undefined
            common_1.assertParamExists('createRegistrationPhoneCode', 'phone', phone);
            const localVarPath = `/v1/code/registration/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }
            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 发送验证码到邮箱，用于更改邮箱。
         * @summary 获取更换邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdateEmailCode: (gRecaptchaResponse, email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            common_1.assertParamExists('createUpdateEmailCode', 'gRecaptchaResponse', gRecaptchaResponse);
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('createUpdateEmailCode', 'email', email);
            const localVarPath = `/v1/code/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 发送验证码到邮箱，用于更改密码。
         * @summary 获取重置密码邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePasswordEmailCode: (gRecaptchaResponse, email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            common_1.assertParamExists('createUpdatePasswordEmailCode', 'gRecaptchaResponse', gRecaptchaResponse);
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('createUpdatePasswordEmailCode', 'email', email);
            const localVarPath = `/v1/code/password/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 发送验证码到手机，用于更改密码。
         * @summary 获取重置密码手机验证码
         * @param {string} gRecaptchaResponse
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePasswordPhoneCode: (gRecaptchaResponse, phone, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            common_1.assertParamExists('createUpdatePasswordPhoneCode', 'gRecaptchaResponse', gRecaptchaResponse);
            // verify required parameter 'phone' is not null or undefined
            common_1.assertParamExists('createUpdatePasswordPhoneCode', 'phone', phone);
            const localVarPath = `/v1/code/password/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }
            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 发送验证码到手机，用于更改手机号码。
         * @summary 获取更换手机号码验证码
         * @param {string} gRecaptchaResponse
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePhoneCode: (gRecaptchaResponse, phone, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            common_1.assertParamExists('createUpdatePhoneCode', 'gRecaptchaResponse', gRecaptchaResponse);
            // verify required parameter 'phone' is not null or undefined
            common_1.assertParamExists('createUpdatePhoneCode', 'phone', phone);
            const localVarPath = `/v1/code/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }
            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.CodeApiAxiosParamCreator = CodeApiAxiosParamCreator;
/**
 * CodeApi - functional programming interface
 * @export
 */
const CodeApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.CodeApiAxiosParamCreator(configuration);
    return {
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationCode(gRecaptchaResponse, email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createRegistrationCode(gRecaptchaResponse, email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationEmailCode(gRecaptchaResponse, email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createRegistrationEmailCode(gRecaptchaResponse, email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 发送验证码到手机，用于注册。
         * @summary 获取注册手机验证码
         * @param {string} gRecaptchaResponse
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationPhoneCode(gRecaptchaResponse, phone, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createRegistrationPhoneCode(gRecaptchaResponse, phone, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 发送验证码到邮箱，用于更改邮箱。
         * @summary 获取更换邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdateEmailCode(gRecaptchaResponse, email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createUpdateEmailCode(gRecaptchaResponse, email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 发送验证码到邮箱，用于更改密码。
         * @summary 获取重置密码邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePasswordEmailCode(gRecaptchaResponse, email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createUpdatePasswordEmailCode(gRecaptchaResponse, email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 发送验证码到手机，用于更改密码。
         * @summary 获取重置密码手机验证码
         * @param {string} gRecaptchaResponse
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePasswordPhoneCode(gRecaptchaResponse, phone, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createUpdatePasswordPhoneCode(gRecaptchaResponse, phone, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 发送验证码到手机，用于更改手机号码。
         * @summary 获取更换手机号码验证码
         * @param {string} gRecaptchaResponse
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePhoneCode(gRecaptchaResponse, phone, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createUpdatePhoneCode(gRecaptchaResponse, phone, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.CodeApiFp = CodeApiFp;
/**
 * CodeApi - factory interface
 * @export
 */
const CodeApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.CodeApiFp(configuration);
    return {
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationCode(gRecaptchaResponse, email, options) {
            return localVarFp.createRegistrationCode(gRecaptchaResponse, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到邮箱，用于注册。
         * @summary 获取注册邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationEmailCode(gRecaptchaResponse, email, options) {
            return localVarFp.createRegistrationEmailCode(gRecaptchaResponse, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到手机，用于注册。
         * @summary 获取注册手机验证码
         * @param {string} gRecaptchaResponse
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrationPhoneCode(gRecaptchaResponse, phone, options) {
            return localVarFp.createRegistrationPhoneCode(gRecaptchaResponse, phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到邮箱，用于更改邮箱。
         * @summary 获取更换邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdateEmailCode(gRecaptchaResponse, email, options) {
            return localVarFp.createUpdateEmailCode(gRecaptchaResponse, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到邮箱，用于更改密码。
         * @summary 获取重置密码邮箱验证码
         * @param {string} gRecaptchaResponse
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePasswordEmailCode(gRecaptchaResponse, email, options) {
            return localVarFp.createUpdatePasswordEmailCode(gRecaptchaResponse, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到手机，用于更改密码。
         * @summary 获取重置密码手机验证码
         * @param {string} gRecaptchaResponse
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePasswordPhoneCode(gRecaptchaResponse, phone, options) {
            return localVarFp.createUpdatePasswordPhoneCode(gRecaptchaResponse, phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 发送验证码到手机，用于更改手机号码。
         * @summary 获取更换手机号码验证码
         * @param {string} gRecaptchaResponse
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUpdatePhoneCode(gRecaptchaResponse, phone, options) {
            return localVarFp.createUpdatePhoneCode(gRecaptchaResponse, phone, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CodeApiFactory = CodeApiFactory;
/**
 * CodeApi - object-oriented interface
 * @export
 * @class CodeApi
 * @extends {BaseAPI}
 */
class CodeApi extends base_1.BaseAPI {
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createRegistrationCode(gRecaptchaResponse, email, options) {
        return exports.CodeApiFp(this.configuration).createRegistrationCode(gRecaptchaResponse, email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 发送验证码到邮箱，用于注册。
     * @summary 获取注册邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createRegistrationEmailCode(gRecaptchaResponse, email, options) {
        return exports.CodeApiFp(this.configuration).createRegistrationEmailCode(gRecaptchaResponse, email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 发送验证码到手机，用于注册。
     * @summary 获取注册手机验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createRegistrationPhoneCode(gRecaptchaResponse, phone, options) {
        return exports.CodeApiFp(this.configuration).createRegistrationPhoneCode(gRecaptchaResponse, phone, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 发送验证码到邮箱，用于更改邮箱。
     * @summary 获取更换邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createUpdateEmailCode(gRecaptchaResponse, email, options) {
        return exports.CodeApiFp(this.configuration).createUpdateEmailCode(gRecaptchaResponse, email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 发送验证码到邮箱，用于更改密码。
     * @summary 获取重置密码邮箱验证码
     * @param {string} gRecaptchaResponse
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createUpdatePasswordEmailCode(gRecaptchaResponse, email, options) {
        return exports.CodeApiFp(this.configuration).createUpdatePasswordEmailCode(gRecaptchaResponse, email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 发送验证码到手机，用于更改密码。
     * @summary 获取重置密码手机验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createUpdatePasswordPhoneCode(gRecaptchaResponse, phone, options) {
        return exports.CodeApiFp(this.configuration).createUpdatePasswordPhoneCode(gRecaptchaResponse, phone, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 发送验证码到手机，用于更改手机号码。
     * @summary 获取更换手机号码验证码
     * @param {string} gRecaptchaResponse
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    createUpdatePhoneCode(gRecaptchaResponse, phone, options) {
        return exports.CodeApiFp(this.configuration).createUpdatePhoneCode(gRecaptchaResponse, phone, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CodeApi = CodeApi;
/**
 * GrantTypesApi - axios parameter creator
 * @export
 */
const GrantTypesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientGrantTypes: (cid, tid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('addClientGrantTypes', 'cid', cid);
            // verify required parameter 'tid' is not null or undefined
            common_1.assertParamExists('addClientGrantTypes', 'tid', tid);
            const localVarPath = `/v1/clients/{cid}/types`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientGrantTypes: (uid, cid, tid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('addUserClientGrantTypes', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('addUserClientGrantTypes', 'cid', cid);
            // verify required parameter 'tid' is not null or undefined
            common_1.assertParamExists('addUserClientGrantTypes', 'tid', tid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/types`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientGrantTypes: (cid, tid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('deleteClientGrantTypes', 'cid', cid);
            // verify required parameter 'tid' is not null or undefined
            common_1.assertParamExists('deleteClientGrantTypes', 'tid', tid);
            const localVarPath = `/v1/clients/{cid}/types`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 删除授权模式
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantTypes: (tid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'tid' is not null or undefined
            common_1.assertParamExists('deleteGrantTypes', 'tid', tid);
            const localVarPath = `/v1/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserClientGrantTypes: (uid, cid, tid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('deleteUserClientGrantTypes', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('deleteUserClientGrantTypes', 'cid', cid);
            // verify required parameter 'tid' is not null or undefined
            common_1.assertParamExists('deleteUserClientGrantTypes', 'tid', tid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/types`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientGrantTypes: (cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('getClientGrantTypes', 'cid', cid);
            const localVarPath = `/v1/clients/{cid}/types`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取授权模式
         * @param {Array<number>} [tid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantTypes: (tid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (tid) {
                localVarQueryParameter['tid'] = tid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientGrantTypes: (uid, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('getUserClientGrantTypes', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('getUserClientGrantTypes', 'cid', cid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/types`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 添加或修改授权模式
         * @param {Array<GrantType>} grantType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGrantTypes: (grantType, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'grantType' is not null or undefined
            common_1.assertParamExists('setGrantTypes', 'grantType', grantType);
            const localVarPath = `/v1/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(grantType, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.GrantTypesApiAxiosParamCreator = GrantTypesApiAxiosParamCreator;
/**
 * GrantTypesApi - functional programming interface
 * @export
 */
const GrantTypesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.GrantTypesApiAxiosParamCreator(configuration);
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientGrantTypes(cid, tid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addClientGrantTypes(cid, tid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientGrantTypes(uid, cid, tid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addUserClientGrantTypes(uid, cid, tid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientGrantTypes(cid, tid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteClientGrantTypes(cid, tid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 删除授权模式
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantTypes(tid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteGrantTypes(tid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserClientGrantTypes(uid, cid, tid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteUserClientGrantTypes(uid, cid, tid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientGrantTypes(cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getClientGrantTypes(cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取授权模式
         * @param {Array<number>} [tid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantTypes(tid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getGrantTypes(tid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientGrantTypes(uid, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserClientGrantTypes(uid, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 添加或修改授权模式
         * @param {Array<GrantType>} grantType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGrantTypes(grantType, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setGrantTypes(grantType, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.GrantTypesApiFp = GrantTypesApiFp;
/**
 * GrantTypesApi - factory interface
 * @export
 */
const GrantTypesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.GrantTypesApiFp(configuration);
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientGrantTypes(cid, tid, options) {
            return localVarFp.addClientGrantTypes(cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权模式
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientGrantTypes(uid, cid, tid, options) {
            return localVarFp.addUserClientGrantTypes(uid, cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientGrantTypes(cid, tid, options) {
            return localVarFp.deleteClientGrantTypes(cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 删除授权模式
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGrantTypes(tid, options) {
            return localVarFp.deleteGrantTypes(tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权模式
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} tid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserClientGrantTypes(uid, cid, tid, options) {
            return localVarFp.deleteUserClientGrantTypes(uid, cid, tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientGrantTypes(cid, options) {
            return localVarFp.getClientGrantTypes(cid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取授权模式
         * @param {Array<number>} [tid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrantTypes(tid, options) {
            return localVarFp.getGrantTypes(tid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权模式
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientGrantTypes(uid, cid, options) {
            return localVarFp.getUserClientGrantTypes(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_TYPE 权限。
         * @summary 添加或修改授权模式
         * @param {Array<GrantType>} grantType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGrantTypes(grantType, options) {
            return localVarFp.setGrantTypes(grantType, options).then((request) => request(axios, basePath));
        },
    };
};
exports.GrantTypesApiFactory = GrantTypesApiFactory;
/**
 * GrantTypesApi - object-oriented interface
 * @export
 * @class GrantTypesApi
 * @extends {BaseAPI}
 */
class GrantTypesApi extends base_1.BaseAPI {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    addClientGrantTypes(cid, tid, options) {
        return exports.GrantTypesApiFp(this.configuration).addClientGrantTypes(cid, tid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    addUserClientGrantTypes(uid, cid, tid, options) {
        return exports.GrantTypesApiFp(this.configuration).addUserClientGrantTypes(uid, cid, tid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    deleteClientGrantTypes(cid, tid, options) {
        return exports.GrantTypesApiFp(this.configuration).deleteClientGrantTypes(cid, tid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 删除授权模式
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    deleteGrantTypes(tid, options) {
        return exports.GrantTypesApiFp(this.configuration).deleteGrantTypes(tid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} tid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    deleteUserClientGrantTypes(uid, cid, tid, options) {
        return exports.GrantTypesApiFp(this.configuration).deleteUserClientGrantTypes(uid, cid, tid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    getClientGrantTypes(cid, options) {
        return exports.GrantTypesApiFp(this.configuration).getClientGrantTypes(cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取授权模式
     * @param {Array<number>} [tid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    getGrantTypes(tid, options) {
        return exports.GrantTypesApiFp(this.configuration).getGrantTypes(tid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权模式
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    getUserClientGrantTypes(uid, cid, options) {
        return exports.GrantTypesApiFp(this.configuration).getUserClientGrantTypes(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_TYPE 权限。
     * @summary 添加或修改授权模式
     * @param {Array<GrantType>} grantType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GrantTypesApi
     */
    setGrantTypes(grantType, options) {
        return exports.GrantTypesApiFp(this.configuration).setGrantTypes(grantType, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.GrantTypesApi = GrantTypesApi;
/**
 * RolesApi - axios parameter creator
 * @export
 */
const RolesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 删除角色
         * @param {Array<number>} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoles: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('deleteRoles', 'id', id);
            const localVarPath = `/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 删除用户的角色
         * @param {number} uid
         * @param {Array<number>} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoles: (uid, id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('deleteUserRoles', 'uid', uid);
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('deleteUserRoles', 'id', id);
            const localVarPath = `/v1/users/{uid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取角色
         * @param {Array<number>} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
         * @summary 获取用户角色
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoles: (uid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('getUserRoles', 'uid', uid);
            const localVarPath = `/v1/users/{uid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 修改或添加角色
         * @param {Array<Role>} role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoles: (role, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'role' is not null or undefined
            common_1.assertParamExists('setRoles', 'role', role);
            const localVarPath = `/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(role, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 为用户添加角色
         * @param {number} uid
         * @param {Array<UserRole>} userRole
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserRoles: (uid, userRole, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('setUserRoles', 'uid', uid);
            // verify required parameter 'userRole' is not null or undefined
            common_1.assertParamExists('setUserRoles', 'userRole', userRole);
            const localVarPath = `/v1/users/{uid}/roles`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(userRole, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.RolesApiAxiosParamCreator = RolesApiAxiosParamCreator;
/**
 * RolesApi - functional programming interface
 * @export
 */
const RolesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.RolesApiAxiosParamCreator(configuration);
    return {
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 删除角色
         * @param {Array<number>} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoles(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRoles(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 删除用户的角色
         * @param {number} uid
         * @param {Array<number>} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoles(uid, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteUserRoles(uid, id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取角色
         * @param {Array<number>} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRoles(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
         * @summary 获取用户角色
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoles(uid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserRoles(uid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 修改或添加角色
         * @param {Array<Role>} role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoles(role, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setRoles(role, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 为用户添加角色
         * @param {number} uid
         * @param {Array<UserRole>} userRole
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserRoles(uid, userRole, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setUserRoles(uid, userRole, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.RolesApiFp = RolesApiFp;
/**
 * RolesApi - factory interface
 * @export
 */
const RolesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.RolesApiFp(configuration);
    return {
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 删除角色
         * @param {Array<number>} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoles(id, options) {
            return localVarFp.deleteRoles(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 删除用户的角色
         * @param {number} uid
         * @param {Array<number>} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRoles(uid, id, options) {
            return localVarFp.deleteUserRoles(uid, id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取角色
         * @param {Array<number>} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles(id, options) {
            return localVarFp.getRoles(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
         * @summary 获取用户角色
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRoles(uid, options) {
            return localVarFp.getUserRoles(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_ROLE 权限。
         * @summary 修改或添加角色
         * @param {Array<Role>} role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoles(role, options) {
            return localVarFp.setRoles(role, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 GRANT_USER 权限。
         * @summary 为用户添加角色
         * @param {number} uid
         * @param {Array<UserRole>} userRole
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setUserRoles(uid, userRole, options) {
            return localVarFp.setUserRoles(uid, userRole, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RolesApiFactory = RolesApiFactory;
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
class RolesApi extends base_1.BaseAPI {
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 删除角色
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteRoles(id, options) {
        return exports.RolesApiFp(this.configuration).deleteRoles(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 删除用户的角色
     * @param {number} uid
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteUserRoles(uid, id, options) {
        return exports.RolesApiFp(this.configuration).deleteUserRoles(uid, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取角色
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRoles(id, options) {
        return exports.RolesApiFp(this.configuration).getRoles(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_USER 权限。
     * @summary 获取用户角色
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getUserRoles(uid, options) {
        return exports.RolesApiFp(this.configuration).getUserRoles(uid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_ROLE 权限。
     * @summary 修改或添加角色
     * @param {Array<Role>} role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    setRoles(role, options) {
        return exports.RolesApiFp(this.configuration).setRoles(role, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 GRANT_USER 权限。
     * @summary 为用户添加角色
     * @param {number} uid
     * @param {Array<UserRole>} userRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    setUserRoles(uid, userRole, options) {
        return exports.RolesApiFp(this.configuration).setUserRoles(uid, userRole, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RolesApi = RolesApi;
/**
 * ScopesApi - axios parameter creator
 * @export
 */
const ScopesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientScopes: (cid, sid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('addClientScopes', 'cid', cid);
            // verify required parameter 'sid' is not null or undefined
            common_1.assertParamExists('addClientScopes', 'sid', sid);
            const localVarPath = `/v1/clients/{cid}/scopes`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientScopes: (uid, cid, sid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('addUserClientScopes', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('addUserClientScopes', 'cid', cid);
            // verify required parameter 'sid' is not null or undefined
            common_1.assertParamExists('addUserClientScopes', 'sid', sid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/scopes`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 删除授权作用域
         * @param {Array<number>} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScopes: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('deleteScopes', 'id', id);
            const localVarPath = `/v1/scopes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientScopes: (cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('getClientScopes', 'cid', cid);
            const localVarPath = `/v1/clients/{cid}/scopes`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取授权作用域
         * @param {Array<number>} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopes: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/scopes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id) {
                localVarQueryParameter['id'] = id;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientScopes: (uid, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('getUserClientScopes', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('getUserClientScopes', 'cid', cid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/scopes`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientScopes: (cid, sid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('removeClientScopes', 'cid', cid);
            // verify required parameter 'sid' is not null or undefined
            common_1.assertParamExists('removeClientScopes', 'sid', sid);
            const localVarPath = `/v1/clients/{cid}/scopes`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClientScopes: (uid, cid, sid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('removeUserClientScopes', 'uid', uid);
            // verify required parameter 'cid' is not null or undefined
            common_1.assertParamExists('removeUserClientScopes', 'cid', cid);
            // verify required parameter 'sid' is not null or undefined
            common_1.assertParamExists('removeUserClientScopes', 'sid', sid);
            const localVarPath = `/v1/users/{uid}/clients/{cid}/scopes`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)))
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (sid) {
                localVarQueryParameter['sid'] = sid;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 修改或添加授权作用域
         * @param {Array<Scope>} scope
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopes: (scope, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'scope' is not null or undefined
            common_1.assertParamExists('setScopes', 'scope', scope);
            const localVarPath = `/v1/scopes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(scope, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ScopesApiAxiosParamCreator = ScopesApiAxiosParamCreator;
/**
 * ScopesApi - functional programming interface
 * @export
 */
const ScopesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ScopesApiAxiosParamCreator(configuration);
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientScopes(cid, sid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addClientScopes(cid, sid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientScopes(uid, cid, sid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addUserClientScopes(uid, cid, sid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 删除授权作用域
         * @param {Array<number>} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScopes(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteScopes(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientScopes(cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getClientScopes(cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取授权作用域
         * @param {Array<number>} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopes(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getScopes(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientScopes(uid, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserClientScopes(uid, cid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientScopes(cid, sid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeClientScopes(cid, sid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClientScopes(uid, cid, sid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeUserClientScopes(uid, cid, sid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 修改或添加授权作用域
         * @param {Array<Scope>} scope
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopes(scope, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setScopes(scope, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ScopesApiFp = ScopesApiFp;
/**
 * ScopesApi - factory interface
 * @export
 */
const ScopesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ScopesApiFp(configuration);
    return {
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClientScopes(cid, sid, options) {
            return localVarFp.addClientScopes(cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 添加应用授权作用域
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserClientScopes(uid, cid, sid, options) {
            return localVarFp.addUserClientScopes(uid, cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 删除授权作用域
         * @param {Array<number>} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScopes(id, options) {
            return localVarFp.deleteScopes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientScopes(cid, options) {
            return localVarFp.getClientScopes(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 READ_CLIENT 权限。
         * @summary 获取授权作用域
         * @param {Array<number>} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScopes(id, options) {
            return localVarFp.getScopes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
         * @summary 获取应用授权作用域
         * @param {number} uid
         * @param {string} cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserClientScopes(uid, cid, options) {
            return localVarFp.getUserClientScopes(uid, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeClientScopes(cid, sid, options) {
            return localVarFp.removeClientScopes(cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
         * @summary 删除应用授权作用域
         * @param {number} uid
         * @param {string} cid
         * @param {Array<number>} sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserClientScopes(uid, cid, sid, options) {
            return localVarFp.removeUserClientScopes(uid, cid, sid, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 WRITE_SCOPE 权限。
         * @summary 修改或添加授权作用域
         * @param {Array<Scope>} scope
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setScopes(scope, options) {
            return localVarFp.setScopes(scope, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ScopesApiFactory = ScopesApiFactory;
/**
 * ScopesApi - object-oriented interface
 * @export
 * @class ScopesApi
 * @extends {BaseAPI}
 */
class ScopesApi extends base_1.BaseAPI {
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    addClientScopes(cid, sid, options) {
        return exports.ScopesApiFp(this.configuration).addClientScopes(cid, sid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 添加应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    addUserClientScopes(uid, cid, sid, options) {
        return exports.ScopesApiFp(this.configuration).addUserClientScopes(uid, cid, sid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 删除授权作用域
     * @param {Array<number>} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    deleteScopes(id, options) {
        return exports.ScopesApiFp(this.configuration).deleteScopes(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    getClientScopes(cid, options) {
        return exports.ScopesApiFp(this.configuration).getClientScopes(cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 READ_CLIENT 权限。
     * @summary 获取授权作用域
     * @param {Array<number>} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    getScopes(id, options) {
        return exports.ScopesApiFp(this.configuration).getScopes(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 READ_CLIENT 权限。
     * @summary 获取应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    getUserClientScopes(uid, cid, options) {
        return exports.ScopesApiFp(this.configuration).getUserClientScopes(uid, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    removeClientScopes(cid, sid, options) {
        return exports.ScopesApiFp(this.configuration).removeClientScopes(cid, sid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（uid 为当前用户除外）需要 WRITE_CLIENT 权限。
     * @summary 删除应用授权作用域
     * @param {number} uid
     * @param {string} cid
     * @param {Array<number>} sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    removeUserClientScopes(uid, cid, sid, options) {
        return exports.ScopesApiFp(this.configuration).removeUserClientScopes(uid, cid, sid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 WRITE_SCOPE 权限。
     * @summary 修改或添加授权作用域
     * @param {Array<Scope>} scope
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScopesApi
     */
    setScopes(scope, options) {
        return exports.ScopesApiFp(this.configuration).setScopes(scope, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ScopesApi = ScopesApi;
/**
 * TokenApi - axios parameter creator
 * @export
 */
const TokenApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary 检查令牌有效性
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOAuthToken: (token, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'token' is not null or undefined
            common_1.assertParamExists('checkOAuthToken', 'token', token);
            const localVarPath = `/v1/token/validity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 检查令牌有效性
         * @param {string} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOAuthTokenPost: (token, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/token/validity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (token !== undefined) {
                localVarFormParams.set('token', token);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 删除令牌
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToken: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取 JWT 公钥（JWK）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwk: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/jwk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取签名 JWT（JWS）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJws: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/jws`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 颁发签名 JWT（JWS）
         * @param {string} [code]
         * @param {string} [grantType]
         * @param {string} [redirectUri]
         * @param {string} [username]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantJws: (code, grantType, redirectUri, username, password, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/jws`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ClientCredentials required
            // http basic authentication required
            common_1.setBasicAuthToObject(localVarRequestOptions, configuration);
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            if (grantType !== undefined) {
                localVarQueryParameter['grant_type'] = grantType;
            }
            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 颁发 OAuth2 令牌
         * @param {string} [code]
         * @param {string} [grantType]
         * @param {string} [redirectUri]
         * @param {string} [username]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantOAuthToken: (code, grantType, redirectUri, username, password, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/oauth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ClientCredentials required
            // http basic authentication required
            common_1.setBasicAuthToObject(localVarRequestOptions, configuration);
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            if (grantType !== undefined) {
                localVarQueryParameter['grant_type'] = grantType;
            }
            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 颁发默认令牌
         * @param {string} username
         * @param {string} password
         * @param {string} gRecaptchaResponse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantToken: (username, password, gRecaptchaResponse, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'username' is not null or undefined
            common_1.assertParamExists('grantToken', 'username', username);
            // verify required parameter 'password' is not null or undefined
            common_1.assertParamExists('grantToken', 'password', password);
            // verify required parameter 'gRecaptchaResponse' is not null or undefined
            common_1.assertParamExists('grantToken', 'gRecaptchaResponse', gRecaptchaResponse);
            const localVarPath = `/v1/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            if (gRecaptchaResponse !== undefined) {
                localVarQueryParameter['g-recaptcha-response'] = gRecaptchaResponse;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TokenApiAxiosParamCreator = TokenApiAxiosParamCreator;
/**
 * TokenApi - functional programming interface
 * @export
 */
const TokenApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.TokenApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary 检查令牌有效性
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOAuthToken(token, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.checkOAuthToken(token, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 检查令牌有效性
         * @param {string} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOAuthTokenPost(token, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.checkOAuthTokenPost(token, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 删除令牌
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToken(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteToken(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取 JWT 公钥（JWK）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwk(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getJwk(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取签名 JWT（JWS）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJws(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getJws(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 颁发签名 JWT（JWS）
         * @param {string} [code]
         * @param {string} [grantType]
         * @param {string} [redirectUri]
         * @param {string} [username]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantJws(code, grantType, redirectUri, username, password, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.grantJws(code, grantType, redirectUri, username, password, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 颁发 OAuth2 令牌
         * @param {string} [code]
         * @param {string} [grantType]
         * @param {string} [redirectUri]
         * @param {string} [username]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantOAuthToken(code, grantType, redirectUri, username, password, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.grantOAuthToken(code, grantType, redirectUri, username, password, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 颁发默认令牌
         * @param {string} username
         * @param {string} password
         * @param {string} gRecaptchaResponse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantToken(username, password, gRecaptchaResponse, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.grantToken(username, password, gRecaptchaResponse, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.TokenApiFp = TokenApiFp;
/**
 * TokenApi - factory interface
 * @export
 */
const TokenApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.TokenApiFp(configuration);
    return {
        /**
         *
         * @summary 检查令牌有效性
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOAuthToken(token, options) {
            return localVarFp.checkOAuthToken(token, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 检查令牌有效性
         * @param {string} [token]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOAuthTokenPost(token, options) {
            return localVarFp.checkOAuthTokenPost(token, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 删除令牌
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToken(options) {
            return localVarFp.deleteToken(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取 JWT 公钥（JWK）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwk(options) {
            return localVarFp.getJwk(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取签名 JWT（JWS）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJws(options) {
            return localVarFp.getJws(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 颁发签名 JWT（JWS）
         * @param {string} [code]
         * @param {string} [grantType]
         * @param {string} [redirectUri]
         * @param {string} [username]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantJws(code, grantType, redirectUri, username, password, options) {
            return localVarFp.grantJws(code, grantType, redirectUri, username, password, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 颁发 OAuth2 令牌
         * @param {string} [code]
         * @param {string} [grantType]
         * @param {string} [redirectUri]
         * @param {string} [username]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantOAuthToken(code, grantType, redirectUri, username, password, options) {
            return localVarFp.grantOAuthToken(code, grantType, redirectUri, username, password, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 颁发默认令牌
         * @param {string} username
         * @param {string} password
         * @param {string} gRecaptchaResponse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantToken(username, password, gRecaptchaResponse, options) {
            return localVarFp.grantToken(username, password, gRecaptchaResponse, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TokenApiFactory = TokenApiFactory;
/**
 * TokenApi - object-oriented interface
 * @export
 * @class TokenApi
 * @extends {BaseAPI}
 */
class TokenApi extends base_1.BaseAPI {
    /**
     *
     * @summary 检查令牌有效性
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    checkOAuthToken(token, options) {
        return exports.TokenApiFp(this.configuration).checkOAuthToken(token, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 检查令牌有效性
     * @param {string} [token]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    checkOAuthTokenPost(token, options) {
        return exports.TokenApiFp(this.configuration).checkOAuthTokenPost(token, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 删除令牌
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    deleteToken(options) {
        return exports.TokenApiFp(this.configuration).deleteToken(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取 JWT 公钥（JWK）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    getJwk(options) {
        return exports.TokenApiFp(this.configuration).getJwk(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取签名 JWT（JWS）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    getJws(options) {
        return exports.TokenApiFp(this.configuration).getJws(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 颁发签名 JWT（JWS）
     * @param {string} [code]
     * @param {string} [grantType]
     * @param {string} [redirectUri]
     * @param {string} [username]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    grantJws(code, grantType, redirectUri, username, password, options) {
        return exports.TokenApiFp(this.configuration).grantJws(code, grantType, redirectUri, username, password, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 颁发 OAuth2 令牌
     * @param {string} [code]
     * @param {string} [grantType]
     * @param {string} [redirectUri]
     * @param {string} [username]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    grantOAuthToken(code, grantType, redirectUri, username, password, options) {
        return exports.TokenApiFp(this.configuration).grantOAuthToken(code, grantType, redirectUri, username, password, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 颁发默认令牌
     * @param {string} username
     * @param {string} password
     * @param {string} gRecaptchaResponse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    grantToken(username, password, gRecaptchaResponse, options) {
        return exports.TokenApiFp(this.configuration).grantToken(username, password, gRecaptchaResponse, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TokenApi = TokenApi;
/**
 * UserApi - axios parameter creator
 * @export
 */
const UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 应用需要拥有 read:user 授权。
         * @summary 获取当前 Token 的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenUser: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 检查邮箱是否存在
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isEmailExists: (email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'email' is not null or undefined
            common_1.assertParamExists('isEmailExists', 'email', email);
            const localVarPath = `/v1/email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 检查手机号码是否存在
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isPhoneExists: (phone, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'phone' is not null or undefined
            common_1.assertParamExists('isPhoneExists', 'phone', phone);
            const localVarPath = `/v1/phone/{phone}`
                .replace(`{${"phone"}}`, encodeURIComponent(String(phone)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 检查用户名是否存在
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUsernameExists: (username, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'username' is not null or undefined
            common_1.assertParamExists('isUsernameExists', 'username', username);
            const localVarPath = `/v1/username/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 用户注册（通过邮箱验证码或者手机号）
         * @param {string} username
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: (username, password, code, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'username' is not null or undefined
            common_1.assertParamExists('register', 'username', username);
            // verify required parameter 'password' is not null or undefined
            common_1.assertParamExists('register', 'password', password);
            // verify required parameter 'code' is not null or undefined
            common_1.assertParamExists('register', 'code', code);
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用需要 WRITE_USER_EMAIL 权限。
         * @summary 通过密码更改邮箱
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetEmail: (password, code, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'password' is not null or undefined
            common_1.assertParamExists('resetEmail', 'password', password);
            // verify required parameter 'code' is not null or undefined
            common_1.assertParamExists('resetEmail', 'code', code);
            const localVarPath = `/v1/user/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用需要 WRITE_USER_PASSWORD 权限。
         * @summary 通过原密码更改用户密码
         * @param {string} oldPassword
         * @param {string} newPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: (oldPassword, newPassword, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'oldPassword' is not null or undefined
            common_1.assertParamExists('resetPassword', 'oldPassword', oldPassword);
            // verify required parameter 'newPassword' is not null or undefined
            common_1.assertParamExists('resetPassword', 'newPassword', newPassword);
            const localVarPath = `/v1/user/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (oldPassword !== undefined) {
                localVarQueryParameter['oldPassword'] = oldPassword;
            }
            if (newPassword !== undefined) {
                localVarQueryParameter['newPassword'] = newPassword;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 邮箱或手机重置密码
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword1: (password, code, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'password' is not null or undefined
            common_1.assertParamExists('resetPassword1', 'password', password);
            // verify required parameter 'code' is not null or undefined
            common_1.assertParamExists('resetPassword1', 'code', code);
            const localVarPath = `/v1/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用需要 WRITE_USER_PHONE 权限。
         * @summary 通过密码更改手机号码
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPhone: (password, code, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'password' is not null or undefined
            common_1.assertParamExists('resetPhone', 'password', password);
            // verify required parameter 'code' is not null or undefined
            common_1.assertParamExists('resetPhone', 'code', code);
            const localVarPath = `/v1/user/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.UserApiAxiosParamCreator = UserApiAxiosParamCreator;
/**
 * UserApi - functional programming interface
 * @export
 */
const UserApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.UserApiAxiosParamCreator(configuration);
    return {
        /**
         * 应用需要拥有 read:user 授权。
         * @summary 获取当前 Token 的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenUser(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTokenUser(options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 检查邮箱是否存在
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isEmailExists(email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.isEmailExists(email, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 检查手机号码是否存在
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isPhoneExists(phone, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.isPhoneExists(phone, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 检查用户名是否存在
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUsernameExists(username, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.isUsernameExists(username, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 用户注册（通过邮箱验证码或者手机号）
         * @param {string} username
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(username, password, code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.register(username, password, code, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用需要 WRITE_USER_EMAIL 权限。
         * @summary 通过密码更改邮箱
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetEmail(password, code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resetEmail(password, code, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用需要 WRITE_USER_PASSWORD 权限。
         * @summary 通过原密码更改用户密码
         * @param {string} oldPassword
         * @param {string} newPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(oldPassword, newPassword, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resetPassword(oldPassword, newPassword, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 邮箱或手机重置密码
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword1(password, code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resetPassword1(password, code, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用需要 WRITE_USER_PHONE 权限。
         * @summary 通过密码更改手机号码
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPhone(password, code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resetPhone(password, code, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.UserApiFp = UserApiFp;
/**
 * UserApi - factory interface
 * @export
 */
const UserApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.UserApiFp(configuration);
    return {
        /**
         * 应用需要拥有 read:user 授权。
         * @summary 获取当前 Token 的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenUser(options) {
            return localVarFp.getTokenUser(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 检查邮箱是否存在
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isEmailExists(email, options) {
            return localVarFp.isEmailExists(email, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 检查手机号码是否存在
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isPhoneExists(phone, options) {
            return localVarFp.isPhoneExists(phone, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 检查用户名是否存在
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUsernameExists(username, options) {
            return localVarFp.isUsernameExists(username, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 用户注册（通过邮箱验证码或者手机号）
         * @param {string} username
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(username, password, code, options) {
            return localVarFp.register(username, password, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用需要 WRITE_USER_EMAIL 权限。
         * @summary 通过密码更改邮箱
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetEmail(password, code, options) {
            return localVarFp.resetEmail(password, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用需要 WRITE_USER_PASSWORD 权限。
         * @summary 通过原密码更改用户密码
         * @param {string} oldPassword
         * @param {string} newPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(oldPassword, newPassword, options) {
            return localVarFp.resetPassword(oldPassword, newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 邮箱或手机重置密码
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword1(password, code, options) {
            return localVarFp.resetPassword1(password, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用需要 WRITE_USER_PHONE 权限。
         * @summary 通过密码更改手机号码
         * @param {string} password
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPhone(password, code, options) {
            return localVarFp.resetPhone(password, code, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UserApiFactory = UserApiFactory;
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
class UserApi extends base_1.BaseAPI {
    /**
     * 应用需要拥有 read:user 授权。
     * @summary 获取当前 Token 的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getTokenUser(options) {
        return exports.UserApiFp(this.configuration).getTokenUser(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 检查邮箱是否存在
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    isEmailExists(email, options) {
        return exports.UserApiFp(this.configuration).isEmailExists(email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 检查手机号码是否存在
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    isPhoneExists(phone, options) {
        return exports.UserApiFp(this.configuration).isPhoneExists(phone, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 检查用户名是否存在
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    isUsernameExists(username, options) {
        return exports.UserApiFp(this.configuration).isUsernameExists(username, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 用户注册（通过邮箱验证码或者手机号）
     * @param {string} username
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    register(username, password, code, options) {
        return exports.UserApiFp(this.configuration).register(username, password, code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用需要 WRITE_USER_EMAIL 权限。
     * @summary 通过密码更改邮箱
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resetEmail(password, code, options) {
        return exports.UserApiFp(this.configuration).resetEmail(password, code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用需要 WRITE_USER_PASSWORD 权限。
     * @summary 通过原密码更改用户密码
     * @param {string} oldPassword
     * @param {string} newPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resetPassword(oldPassword, newPassword, options) {
        return exports.UserApiFp(this.configuration).resetPassword(oldPassword, newPassword, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 邮箱或手机重置密码
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resetPassword1(password, code, options) {
        return exports.UserApiFp(this.configuration).resetPassword1(password, code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用需要 WRITE_USER_PHONE 权限。
     * @summary 通过密码更改手机号码
     * @param {string} password
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resetPhone(password, code, options) {
        return exports.UserApiFp(this.configuration).resetPhone(password, code, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UserApi = UserApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
const UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 应用和用户需要 CREATE_USER 权限。
         * @summary 创建用户（用户名、邮箱、手机号码不可重复）
         * @param {string} username
         * @param {string} password
         * @param {string} [email]
         * @param {string} [phone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: (username, password, email, phone, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'username' is not null or undefined
            common_1.assertParamExists('createUser', 'username', username);
            // verify required parameter 'password' is not null or undefined
            common_1.assertParamExists('createUser', 'password', password);
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需要 DELETE_USER 权限。
         * @summary 删除用户（永久删除）
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: (uid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('deleteUser', 'uid', uid);
            const localVarPath = `/v1/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 获取用户信息
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: (uid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('getUser', 'uid', uid);
            const localVarPath = `/v1/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary 获取用户头像
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAvatar: (uid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('getUserAvatar', 'uid', uid);
            const localVarPath = `/v1/users/{uid}/avatar`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 查找用户
         * @param {Array<number>} [uid]
         * @param {string} [q]
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {Array<string>} [order]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: (uid, q, offset, limit, order, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (uid) {
                localVarQueryParameter['uid'] = uid;
            }
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (order) {
                localVarQueryParameter['order'] = order;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户头像
         * @param {number} uid
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAvatar: (uid, body, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserAvatar', 'uid', uid);
            // verify required parameter 'body' is not null or undefined
            common_1.assertParamExists('updateUserAvatar', 'body', body);
            const localVarPath = `/v1/users/{uid}/avatar`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'image/_*';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
         * @summary 更新用户邮箱
         * @param {number} uid
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEmail: (uid, code, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserEmail', 'uid', uid);
            // verify required parameter 'code' is not null or undefined
            common_1.assertParamExists('updateUserEmail', 'code', code);
            const localVarPath = `/v1/users/{uid}/email`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户封禁或解封
         * @param {number} uid
         * @param {boolean} enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEnabled: (uid, enabled, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserEnabled', 'uid', uid);
            // verify required parameter 'enabled' is not null or undefined
            common_1.assertParamExists('updateUserEnabled', 'enabled', enabled);
            const localVarPath = `/v1/users/{uid}/ban`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid
         * @param {string} expiredAt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserExpiredAt: (uid, expiredAt, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserExpiredAt', 'uid', uid);
            // verify required parameter 'expiredAt' is not null or undefined
            common_1.assertParamExists('updateUserExpiredAt', 'expiredAt', expiredAt);
            const localVarPath = `/v1/users/{uid}/expired-at`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (expiredAt !== undefined) {
                localVarQueryParameter['expiredAt'] = (expiredAt instanceof Date) ?
                    expiredAt.toISOString() :
                    expiredAt;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户性别
         * @param {number} uid
         * @param {number} gender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGender: (uid, gender, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserGender', 'uid', uid);
            // verify required parameter 'gender' is not null or undefined
            common_1.assertParamExists('updateUserGender', 'gender', gender);
            const localVarPath = `/v1/users/{uid}/gender`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户昵称
         * @param {number} uid
         * @param {string} nickname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserNickname: (uid, nickname, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserNickname', 'uid', uid);
            // verify required parameter 'nickname' is not null or undefined
            common_1.assertParamExists('updateUserNickname', 'nickname', nickname);
            const localVarPath = `/v1/users/{uid}/nickname`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (nickname !== undefined) {
                localVarQueryParameter['nickname'] = nickname;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
         * @summary 更新用户密码
         * @param {number} uid
         * @param {string} password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword: (uid, password, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserPassword', 'uid', uid);
            // verify required parameter 'password' is not null or undefined
            common_1.assertParamExists('updateUserPassword', 'password', password);
            const localVarPath = `/v1/users/{uid}/password`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 应用和用户需拥有 WRITE_USER_PHONE 权限。
         * @summary 更新用户手机号码
         * @param {number} uid
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhone: (uid, code, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserPhone', 'uid', uid);
            // verify required parameter 'code' is not null or undefined
            common_1.assertParamExists('updateUserPhone', 'code', code);
            const localVarPath = `/v1/users/{uid}/phone`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid
         * @param {string} unlockAt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUnlockAt: (uid, unlockAt, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'uid' is not null or undefined
            common_1.assertParamExists('updateUserUnlockAt', 'uid', uid);
            // verify required parameter 'unlockAt' is not null or undefined
            common_1.assertParamExists('updateUserUnlockAt', 'unlockAt', unlockAt);
            const localVarPath = `/v1/users/{uid}/unlock-at`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication AccessToken required
            // http bearer authentication required
            yield common_1.setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (unlockAt !== undefined) {
                localVarQueryParameter['unlockAt'] = (unlockAt instanceof Date) ?
                    unlockAt.toISOString() :
                    unlockAt;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;
/**
 * UsersApi - functional programming interface
 * @export
 */
const UsersApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.UsersApiAxiosParamCreator(configuration);
    return {
        /**
         * 应用和用户需要 CREATE_USER 权限。
         * @summary 创建用户（用户名、邮箱、手机号码不可重复）
         * @param {string} username
         * @param {string} password
         * @param {string} [email]
         * @param {string} [phone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(username, password, email, phone, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createUser(username, password, email, phone, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需要 DELETE_USER 权限。
         * @summary 删除用户（永久删除）
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(uid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteUser(uid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 获取用户信息
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(uid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUser(uid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary 获取用户头像
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAvatar(uid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserAvatar(uid, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 查找用户
         * @param {Array<number>} [uid]
         * @param {string} [q]
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {Array<string>} [order]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(uid, q, offset, limit, order, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUsers(uid, q, offset, limit, order, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户头像
         * @param {number} uid
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAvatar(uid, body, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserAvatar(uid, body, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
         * @summary 更新用户邮箱
         * @param {number} uid
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEmail(uid, code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserEmail(uid, code, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户封禁或解封
         * @param {number} uid
         * @param {boolean} enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEnabled(uid, enabled, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserEnabled(uid, enabled, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid
         * @param {string} expiredAt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserExpiredAt(uid, expiredAt, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserExpiredAt(uid, expiredAt, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户性别
         * @param {number} uid
         * @param {number} gender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGender(uid, gender, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserGender(uid, gender, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户昵称
         * @param {number} uid
         * @param {string} nickname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserNickname(uid, nickname, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserNickname(uid, nickname, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
         * @summary 更新用户密码
         * @param {number} uid
         * @param {string} password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword(uid, password, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserPassword(uid, password, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 应用和用户需拥有 WRITE_USER_PHONE 权限。
         * @summary 更新用户手机号码
         * @param {number} uid
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhone(uid, code, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserPhone(uid, code, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid
         * @param {string} unlockAt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUnlockAt(uid, unlockAt, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateUserUnlockAt(uid, unlockAt, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.UsersApiFp = UsersApiFp;
/**
 * UsersApi - factory interface
 * @export
 */
const UsersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.UsersApiFp(configuration);
    return {
        /**
         * 应用和用户需要 CREATE_USER 权限。
         * @summary 创建用户（用户名、邮箱、手机号码不可重复）
         * @param {string} username
         * @param {string} password
         * @param {string} [email]
         * @param {string} [phone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(username, password, email, phone, options) {
            return localVarFp.createUser(username, password, email, phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需要 DELETE_USER 权限。
         * @summary 删除用户（永久删除）
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(uid, options) {
            return localVarFp.deleteUser(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 获取用户信息
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(uid, options) {
            return localVarFp.getUser(uid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 获取用户头像
         * @param {number} uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAvatar(uid, options) {
            return localVarFp.getUserAvatar(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
         * @summary 查找用户
         * @param {Array<number>} [uid]
         * @param {string} [q]
         * @param {number} [offset]
         * @param {number} [limit]
         * @param {Array<string>} [order]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(uid, q, offset, limit, order, options) {
            return localVarFp.getUsers(uid, q, offset, limit, order, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户头像
         * @param {number} uid
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserAvatar(uid, body, options) {
            return localVarFp.updateUserAvatar(uid, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
         * @summary 更新用户邮箱
         * @param {number} uid
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEmail(uid, code, options) {
            return localVarFp.updateUserEmail(uid, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户封禁或解封
         * @param {number} uid
         * @param {boolean} enabled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserEnabled(uid, enabled, options) {
            return localVarFp.updateUserEnabled(uid, enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid
         * @param {string} expiredAt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserExpiredAt(uid, expiredAt, options) {
            return localVarFp.updateUserExpiredAt(uid, expiredAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户性别
         * @param {number} uid
         * @param {number} gender
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserGender(uid, gender, options) {
            return localVarFp.updateUserGender(uid, gender, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
         * @summary 更新用户昵称
         * @param {number} uid
         * @param {string} nickname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserNickname(uid, nickname, options) {
            return localVarFp.updateUserNickname(uid, nickname, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
         * @summary 更新用户密码
         * @param {number} uid
         * @param {string} password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPassword(uid, password, options) {
            return localVarFp.updateUserPassword(uid, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 应用和用户需拥有 WRITE_USER_PHONE 权限。
         * @summary 更新用户手机号码
         * @param {number} uid
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPhone(uid, code, options) {
            return localVarFp.updateUserPhone(uid, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
         * @summary 设置用户解锁日期
         * @param {number} uid
         * @param {string} unlockAt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUnlockAt(uid, unlockAt, options) {
            return localVarFp.updateUserUnlockAt(uid, unlockAt, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UsersApiFactory = UsersApiFactory;
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends base_1.BaseAPI {
    /**
     * 应用和用户需要 CREATE_USER 权限。
     * @summary 创建用户（用户名、邮箱、手机号码不可重复）
     * @param {string} username
     * @param {string} password
     * @param {string} [email]
     * @param {string} [phone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(username, password, email, phone, options) {
        return exports.UsersApiFp(this.configuration).createUser(username, password, email, phone, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需要 DELETE_USER 权限。
     * @summary 删除用户（永久删除）
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUser(uid, options) {
        return exports.UsersApiFp(this.configuration).deleteUser(uid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 获取用户的公开信息。如果应用与用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 获取用户信息
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(uid, options) {
        return exports.UsersApiFp(this.configuration).getUser(uid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary 获取用户头像
     * @param {number} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUserAvatar(uid, options) {
        return exports.UsersApiFp(this.configuration).getUserAvatar(uid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 查询或者列出用户（取决于有无关键字(q)或者用户ID(uid)），获取公开信息。若应用和用户拥有 READ_USER 权限，则获取完整信息。
     * @summary 查找用户
     * @param {Array<number>} [uid]
     * @param {string} [q]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {Array<string>} [order]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsers(uid, q, offset, limit, order, options) {
        return exports.UsersApiFp(this.configuration).getUsers(uid, q, offset, limit, order, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户头像
     * @param {number} uid
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserAvatar(uid, body, options) {
        return exports.UsersApiFp(this.configuration).updateUserAvatar(uid, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需拥有 WRITE_USER_EMAIL 权限。
     * @summary 更新用户邮箱
     * @param {number} uid
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserEmail(uid, code, options) {
        return exports.UsersApiFp(this.configuration).updateUserEmail(uid, code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 封禁或解封用户。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户封禁或解封
     * @param {number} uid
     * @param {boolean} enabled
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserEnabled(uid, enabled, options) {
        return exports.UsersApiFp(this.configuration).updateUserEnabled(uid, enabled, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 设置用户账号过期日期。设置为 NULL 则无过期时间。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid
     * @param {string} expiredAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserExpiredAt(uid, expiredAt, options) {
        return exports.UsersApiFp(this.configuration).updateUserExpiredAt(uid, expiredAt, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户性别
     * @param {number} uid
     * @param {number} gender
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserGender(uid, gender, options) {
        return exports.UsersApiFp(this.configuration).updateUserGender(uid, gender, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户（修改自身信息除外）需要拥有 WRITE_USER 权限。
     * @summary 更新用户昵称
     * @param {number} uid
     * @param {string} nickname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserNickname(uid, nickname, options) {
        return exports.UsersApiFp(this.configuration).updateUserNickname(uid, nickname, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需拥有 WRITE_USER_PASSWORD 权限。
     * @summary 更新用户密码
     * @param {number} uid
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserPassword(uid, password, options) {
        return exports.UsersApiFp(this.configuration).updateUserPassword(uid, password, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 应用和用户需拥有 WRITE_USER_PHONE 权限。
     * @summary 更新用户手机号码
     * @param {number} uid
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserPhone(uid, code, options) {
        return exports.UsersApiFp(this.configuration).updateUserPhone(uid, code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 设置用户账号的解锁日期，在此日期日前账号不能使用。设置为 NULL 则不锁定。应用和用户需拥有 LOCK_USER 权限。
     * @summary 设置用户解锁日期
     * @param {number} uid
     * @param {string} unlockAt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUserUnlockAt(uid, unlockAt, options) {
        return exports.UsersApiFp(this.configuration).updateUserUnlockAt(uid, unlockAt, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UsersApi = UsersApi;
